{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport PropTypes from 'prop-types';\nimport BaseControl from './base-control';\nvar propTypes = Object.assign({}, BaseControl.propTypes, {\n  draggable: PropTypes.bool,\n  onDrag: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDragStart: PropTypes.func,\n  offsetLeft: PropTypes.number,\n  offsetTop: PropTypes.number\n});\nvar defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  draggable: false,\n  offsetLeft: 0,\n  offsetTop: 0\n});\n\nvar DraggableControl = function (_BaseControl) {\n  _inherits(DraggableControl, _BaseControl);\n\n  var _super = _createSuper(DraggableControl);\n\n  function DraggableControl() {\n    var _this;\n\n    _classCallCheck(this, DraggableControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      dragPos: null,\n      dragOffset: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_dragEvents\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_onDragStart\", function (event) {\n      var _this$props = _this.props,\n          draggable = _this$props.draggable,\n          captureDrag = _this$props.captureDrag;\n\n      if (draggable || captureDrag) {\n        event.stopPropagation();\n      }\n\n      if (!draggable) {\n        return;\n      }\n\n      var dragPos = _this._getDragEventPosition(event);\n\n      var dragOffset = _this._getDragEventOffset(event);\n\n      _this.setState({\n        dragPos: dragPos,\n        dragOffset: dragOffset\n      });\n\n      _this._setupDragEvents();\n\n      var onDragStart = _this.props.onDragStart;\n\n      if (onDragStart && dragOffset) {\n        var callbackEvent = Object.assign({}, event);\n        callbackEvent.lngLat = _this._getDragLngLat(dragPos, dragOffset);\n        onDragStart(callbackEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onDrag\", function (event) {\n      event.stopPropagation();\n\n      var dragPos = _this._getDragEventPosition(event);\n\n      _this.setState({\n        dragPos: dragPos\n      });\n\n      var onDrag = _this.props.onDrag;\n      var dragOffset = _this.state.dragOffset;\n\n      if (onDrag && dragOffset) {\n        var callbackEvent = Object.assign({}, event);\n        callbackEvent.lngLat = _this._getDragLngLat(dragPos, dragOffset);\n        onDrag(callbackEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onDragEnd\", function (event) {\n      var _this$state = _this.state,\n          dragPos = _this$state.dragPos,\n          dragOffset = _this$state.dragOffset;\n      event.stopPropagation();\n\n      _this.setState({\n        dragPos: null,\n        dragOffset: null\n      });\n\n      _this._removeDragEvents();\n\n      var onDragEnd = _this.props.onDragEnd;\n\n      if (onDragEnd && dragPos && dragOffset) {\n        var callbackEvent = Object.assign({}, event);\n        callbackEvent.lngLat = _this._getDragLngLat(dragPos, dragOffset);\n        onDragEnd(callbackEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onDragCancel\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        dragPos: null,\n        dragOffset: null\n      });\n\n      _this._removeDragEvents();\n    });\n\n    return _this;\n  }\n\n  _createClass(DraggableControl, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _get(_getPrototypeOf(DraggableControl.prototype), \"componentWillUnmount\", this).call(this);\n\n      this._removeDragEvents();\n    }\n  }, {\n    key: \"_setupDragEvents\",\n    value: function _setupDragEvents() {\n      var eventManager = this._context.eventManager;\n\n      if (!eventManager) {\n        return;\n      }\n\n      this._dragEvents = {\n        panmove: this._onDrag,\n        panend: this._onDragEnd,\n        pancancel: this._onDragCancel\n      };\n      eventManager.on(this._dragEvents);\n    }\n  }, {\n    key: \"_removeDragEvents\",\n    value: function _removeDragEvents() {\n      var eventManager = this._context.eventManager;\n\n      if (!eventManager || !this._dragEvents) {\n        return;\n      }\n\n      eventManager.off(this._dragEvents);\n      this._dragEvents = null;\n    }\n  }, {\n    key: \"_getDragEventPosition\",\n    value: function _getDragEventPosition(event) {\n      var _event$offsetCenter = event.offsetCenter,\n          x = _event$offsetCenter.x,\n          y = _event$offsetCenter.y;\n      return [x, y];\n    }\n  }, {\n    key: \"_getDragEventOffset\",\n    value: function _getDragEventOffset(event) {\n      var _event$center = event.center,\n          x = _event$center.x,\n          y = _event$center.y;\n      var container = this._containerRef.current;\n\n      if (container) {\n        var rect = container.getBoundingClientRect();\n        return [rect.left - x, rect.top - y];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getDraggedPosition\",\n    value: function _getDraggedPosition(dragPos, dragOffset) {\n      return [dragPos[0] + dragOffset[0], dragPos[1] + dragOffset[1]];\n    }\n  }, {\n    key: \"_getDragLngLat\",\n    value: function _getDragLngLat(dragPos, dragOffset) {\n      var _this$props2 = this.props,\n          offsetLeft = _this$props2.offsetLeft,\n          offsetTop = _this$props2.offsetTop;\n\n      var _this$_getDraggedPosi = this._getDraggedPosition(dragPos, dragOffset),\n          _this$_getDraggedPosi2 = _slicedToArray(_this$_getDraggedPosi, 2),\n          x = _this$_getDraggedPosi2[0],\n          y = _this$_getDraggedPosi2[1];\n\n      return this._context.viewport.unproject([x - offsetLeft, y - offsetTop]);\n    }\n  }]);\n\n  return DraggableControl;\n}(BaseControl);\n\n_defineProperty(DraggableControl, \"propTypes\", propTypes);\n\n_defineProperty(DraggableControl, \"defaultProps\", defaultProps);\n\nexport { DraggableControl as default };","map":{"version":3,"sources":["../../../src/components/draggable-control.js"],"names":["propTypes","BaseControl","draggable","PropTypes","onDrag","onDragEnd","onDragStart","offsetLeft","offsetTop","number","defaultProps","DraggableControl","dragPos","dragOffset","eventManager","panmove","panend","pancancel","_onDragCancel","event","x","y","container","rect","captureDrag","callbackEvent","Object"],"mappings":"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","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport PropTypes from 'prop-types';\nimport BaseControl from './base-control';\n\nimport type {MjolnirEvent} from 'mjolnir.js';\nimport type {BaseControlProps} from './base-control';\n\nconst propTypes = Object.assign({}, BaseControl.propTypes, {\n  draggable: PropTypes.bool,\n  onDrag: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDragStart: PropTypes.func,\n  // Offset from the left\n  offsetLeft: PropTypes.number,\n  // Offset from the top\n  offsetTop: PropTypes.number\n});\n\nconst defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  draggable: false,\n  offsetLeft: 0,\n  offsetTop: 0\n});\n\ntype Coordinate = [number, number];\ntype Offset = [number, number];\ntype CallbackEvent = MjolnirEvent & {\n  lngLat: Coordinate\n};\n\nexport type DraggableControlProps = BaseControlProps & {\n  draggable: boolean,\n  onDrag?: CallbackEvent => any,\n  onDragEnd?: CallbackEvent => any,\n  onDragStart?: CallbackEvent => any,\n  offsetLeft: number,\n  offsetTop: number\n};\n\ntype State = {\n  dragPos: ?Coordinate,\n  dragOffset: ?Offset\n};\n\nexport default class DraggableControl<Props: DraggableControlProps> extends BaseControl<\n  Props,\n  State,\n  HTMLDivElement\n> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  state = {\n    dragPos: null,\n    dragOffset: null\n  };\n\n  _dragEvents: any = null;\n\n  componentWillUnmount() {\n    super.componentWillUnmount();\n    this._removeDragEvents();\n  }\n\n  _setupDragEvents() {\n    const {eventManager} = this._context;\n    if (!eventManager) {\n      return;\n    }\n\n    // panstart is already attached by parent class BaseControl,\n    // here we just add listeners for subsequent drag events\n    this._dragEvents = {\n      panmove: this._onDrag,\n      panend: this._onDragEnd,\n      pancancel: this._onDragCancel\n    };\n    eventManager.on(this._dragEvents);\n  }\n\n  _removeDragEvents() {\n    const {eventManager} = this._context;\n    if (!eventManager || !this._dragEvents) {\n      return;\n    }\n    eventManager.off(this._dragEvents);\n    this._dragEvents = null;\n  }\n\n  _getDragEventPosition(event: MjolnirEvent): Coordinate {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  /**\n   * Returns offset of top-left of marker from drag start event\n   * (used for positioning marker relative to next mouse coordinates)\n   */\n  _getDragEventOffset(event: MjolnirEvent): ?Offset {\n    const {\n      center: {x, y}\n    } = event;\n    const container = this._containerRef.current;\n    if (container) {\n      const rect = container.getBoundingClientRect();\n      return [rect.left - x, rect.top - y];\n    }\n    return null;\n  }\n\n  _getDraggedPosition(dragPos: Coordinate, dragOffset: Offset): Coordinate {\n    return [dragPos[0] + dragOffset[0], dragPos[1] + dragOffset[1]];\n  }\n\n  _getDragLngLat(dragPos: Coordinate, dragOffset: Offset): Coordinate {\n    const {offsetLeft, offsetTop} = this.props;\n    const [x, y] = this._getDraggedPosition(dragPos, dragOffset);\n    // Unproject x/y value while respecting offset coordinates\n    return this._context.viewport.unproject([x - offsetLeft, y - offsetTop]);\n  }\n\n  _onDragStart = (event: MjolnirEvent) => {\n    const {draggable, captureDrag} = this.props;\n    if (draggable || captureDrag) {\n      event.stopPropagation();\n    }\n    if (!draggable) {\n      return;\n    }\n\n    const dragPos = this._getDragEventPosition(event);\n    const dragOffset = this._getDragEventOffset(event);\n    this.setState({dragPos, dragOffset});\n    this._setupDragEvents();\n\n    const {onDragStart} = this.props;\n    if (onDragStart && dragOffset) {\n      const callbackEvent: CallbackEvent = Object.assign({}, event);\n      callbackEvent.lngLat = this._getDragLngLat(dragPos, dragOffset);\n      onDragStart(callbackEvent);\n    }\n  };\n\n  _onDrag = (event: MjolnirEvent) => {\n    event.stopPropagation();\n\n    const dragPos = this._getDragEventPosition(event);\n    this.setState({dragPos});\n\n    const {onDrag} = this.props;\n    const {dragOffset} = this.state;\n    if (onDrag && dragOffset) {\n      const callbackEvent: CallbackEvent = Object.assign({}, event);\n      callbackEvent.lngLat = this._getDragLngLat(dragPos, dragOffset);\n      onDrag(callbackEvent);\n    }\n  };\n\n  _onDragEnd = (event: MjolnirEvent) => {\n    const {dragPos, dragOffset} = this.state;\n\n    event.stopPropagation();\n    this.setState({dragPos: null, dragOffset: null});\n    this._removeDragEvents();\n\n    const {onDragEnd} = this.props;\n    if (onDragEnd && dragPos && dragOffset) {\n      const callbackEvent: CallbackEvent = Object.assign({}, event);\n      callbackEvent.lngLat = this._getDragLngLat(dragPos, dragOffset);\n      onDragEnd(callbackEvent);\n    }\n  };\n\n  _onDragCancel = (event: MjolnirEvent) => {\n    event.stopPropagation();\n    this.setState({dragPos: null, dragOffset: null});\n    this._removeDragEvents();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}