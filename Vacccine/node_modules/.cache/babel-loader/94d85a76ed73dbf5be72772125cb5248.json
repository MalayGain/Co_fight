{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WebMercatorViewport, { normalizeViewportProps } from 'viewport-mercator-project';\nimport { TransitionInterpolator } from './transition';\nimport { clamp } from './math-utils';\nimport assert from './assert';\nexport var MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\nvar MapState = function () {\n  function MapState(_ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        latitude = _ref.latitude,\n        longitude = _ref.longitude,\n        zoom = _ref.zoom,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? DEFAULT_STATE.altitude : _ref$altitude,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? MAPBOX_LIMITS.maxZoom : _ref$maxZoom,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? MAPBOX_LIMITS.minZoom : _ref$minZoom,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? MAPBOX_LIMITS.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? MAPBOX_LIMITS.minPitch : _ref$minPitch,\n        transitionDuration = _ref.transitionDuration,\n        transitionEasing = _ref.transitionEasing,\n        transitionInterpolator = _ref.transitionInterpolator,\n        transitionInterruption = _ref.transitionInterruption,\n        startPanLngLat = _ref.startPanLngLat,\n        startZoomLngLat = _ref.startZoomLngLat,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, MapState);\n\n    _defineProperty(this, \"_viewportProps\", void 0);\n\n    _defineProperty(this, \"_interactiveState\", void 0);\n\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n    this._viewportProps = this._applyConstraints({\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch,\n      transitionDuration: transitionDuration,\n      transitionEasing: transitionEasing,\n      transitionInterpolator: transitionInterpolator,\n      transitionInterruption: transitionInterruption\n    });\n    this._interactiveState = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n  }\n\n  _createClass(MapState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedMapState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n\n      var startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) {\n        return this;\n      }\n\n      var _this$_calculateNewLn = this._calculateNewLngLat({\n        startPanLngLat: startPanLngLat,\n        pos: pos\n      }),\n          _this$_calculateNewLn2 = _slicedToArray(_this$_calculateNewLn, 2),\n          longitude = _this$_calculateNewLn2[0],\n          latitude = _this$_calculateNewLn2[1];\n\n      return this._getUpdatedMapState({\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedMapState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedMapState({\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var _ref5$deltaScaleX = _ref5.deltaScaleX,\n          deltaScaleX = _ref5$deltaScaleX === void 0 ? 0 : _ref5$deltaScaleX,\n          _ref5$deltaScaleY = _ref5.deltaScaleY,\n          deltaScaleY = _ref5$deltaScaleY === void 0 ? 0 : _ref5$deltaScaleY;\n      var _this$_interactiveSta = this._interactiveState,\n          startBearing = _this$_interactiveSta.startBearing,\n          startPitch = _this$_interactiveSta.startPitch;\n\n      if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var _this$_calculateNewPi = this._calculateNewPitchAndBearing({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY,\n        startBearing: startBearing || 0,\n        startPitch: startPitch || 0\n      }),\n          pitch = _this$_calculateNewPi.pitch,\n          bearing = _this$_calculateNewPi.bearing;\n\n      return this._getUpdatedMapState({\n        bearing: bearing,\n        pitch: pitch\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedMapState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedMapState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      assert(scale > 0, '`scale` must be a positive number');\n      var _this$_interactiveSta2 = this._interactiveState,\n          startZoom = _this$_interactiveSta2.startZoom,\n          startZoomLngLat = _this$_interactiveSta2.startZoomLngLat;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      assert(startZoomLngLat, '`startZoomLngLat` prop is required ' + 'for zoom behavior to calculate where to position the map.');\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom || 0\n      });\n\n      var zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {\n        zoom: zoom\n      }));\n\n      var _zoomedViewport$getMa = zoomedViewport.getMapCenterByLngLatPosition({\n        lngLat: startZoomLngLat,\n        pos: pos\n      }),\n          _zoomedViewport$getMa2 = _slicedToArray(_zoomedViewport$getMa, 2),\n          longitude = _zoomedViewport$getMa2[0],\n          latitude = _zoomedViewport$getMa2[1];\n\n      return this._getUpdatedMapState({\n        zoom: zoom,\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedMapState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"_getUpdatedMapState\",\n    value: function _getUpdatedMapState(newProps) {\n      return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      Object.assign(props, normalizeViewportProps(props));\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewLngLat\",\n    value: function _calculateNewLngLat(_ref8) {\n      var startPanLngLat = _ref8.startPanLngLat,\n          pos = _ref8.pos;\n      var viewport = new WebMercatorViewport(this._viewportProps);\n      return viewport.getMapCenterByLngLatPosition({\n        lngLat: startPanLngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref9) {\n      var scale = _ref9.scale,\n          startZoom = _ref9.startZoom;\n      var _this$_viewportProps = this._viewportProps,\n          maxZoom = _this$_viewportProps.maxZoom,\n          minZoom = _this$_viewportProps.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref10) {\n      var deltaScaleX = _ref10.deltaScaleX,\n          deltaScaleY = _ref10.deltaScaleY,\n          startBearing = _ref10.startBearing,\n          startPitch = _ref10.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps2 = this._viewportProps,\n          minPitch = _this$_viewportProps2.minPitch,\n          maxPitch = _this$_viewportProps2.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }]);\n\n  return MapState;\n}();\n\nexport { MapState as default };","map":{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","assert","Number","pos","startPos","deltaScaleX","deltaScaleY","scale","zoomedViewport","lngLat","newProps","Object","props","clamp","normalizeViewportProps","viewport","Math"],"mappings":"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","sourcesContent":["// @flow\nimport WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport {TransitionInterpolator} from './transition';\nimport {clamp} from './math-utils';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\ntype ViewportProps = {\n  width: number,\n  height: number,\n  latitude: number,\n  longitude: number,\n  zoom: number,\n  bearing: number,\n  pitch: number,\n  altitude: number,\n  maxZoom: number,\n  minZoom: number,\n  maxPitch: number,\n  minPitch: number,\n  transitionDuration: number,\n  transitionEasing: number => number,\n  transitionInterpolator: TransitionInterpolator,\n  transitionInterruption: number\n};\n\ntype InteractiveState = {\n  startPanLngLat?: Array<number>,\n  startZoomLngLat?: Array<number>,\n  startBearing?: number,\n  startPitch?: number,\n  startZoom?: number\n};\n\nexport type MapStateProps = ViewportProps &\n  InteractiveState & {\n    altitude?: number,\n    maxZoom?: number,\n    minZoom?: number,\n    maxPitch?: number,\n    minPitch?: number\n  };\n\nexport default class MapState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  }: MapStateProps) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  _viewportProps: ViewportProps;\n  _interactiveState: InteractiveState;\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}: {pos: Array<number>, startPos?: Array<number>}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({\n      startPanLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}: {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0}: {deltaScaleX?: number, deltaScaleY?: number}) {\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing: startBearing || 0,\n      startPitch: startPitch || 0\n    });\n\n    return this._getUpdatedMapState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}: {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}: {pos: Array<number>, startPos?: Array<number>, scale: number}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom: startZoom || 0});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    // $FlowFixMe\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps: any): MapState {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props: ViewportProps): ViewportProps {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos: ?Array<number>): ?Array<number> {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({\n    startPanLngLat,\n    pos\n  }: {\n    startPanLngLat: Array<number>,\n    pos: Array<number>\n  }): Array<number> {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({\n      lngLat: startPanLngLat,\n      pos\n    });\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}: {scale: number, startZoom: number}): number {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({\n    deltaScaleX,\n    deltaScaleY,\n    startBearing,\n    startPitch\n  }: {\n    deltaScaleX: number,\n    deltaScaleY: number,\n    startBearing: number,\n    startPitch: number\n  }) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}