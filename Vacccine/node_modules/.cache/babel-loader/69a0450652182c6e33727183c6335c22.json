{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { createMat4, transformVector } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nvar PI = Math.PI;\nvar PI_4 = PI / 4;\nvar DEGREES_TO_RADIANS = PI / 180;\nvar RADIANS_TO_DEGREES = 180 / PI;\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nvar DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\nexport function lngLatToWorld(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      lng = _ref2[0],\n      lat = _ref2[1];\n\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  var lambda2 = lng * DEGREES_TO_RADIANS;\n  var phi2 = lat * DEGREES_TO_RADIANS;\n  var x = TILE_SIZE * (lambda2 + PI) / (2 * PI);\n  var y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(_ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      x = _ref4[0],\n      y = _ref4[1];\n\n  var lambda2 = x / TILE_SIZE * (2 * PI) - PI;\n  var phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(_ref5) {\n  var latitude = _ref5.latitude;\n  assert(Number.isFinite(latitude));\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function getDistanceScales(_ref6) {\n  var latitude = _ref6.latitude,\n      longitude = _ref6.longitude,\n      _ref6$highPrecision = _ref6.highPrecision,\n      highPrecision = _ref6$highPrecision === void 0 ? false : _ref6$highPrecision;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n  var result = {};\n  var worldSize = TILE_SIZE;\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  var unitsPerDegreeX = worldSize / 360;\n  var unitsPerDegreeY = unitsPerDegreeX / latCosine;\n  var altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  result.unitsPerMeter = [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter];\n  result.metersPerUnit = [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter];\n  result.unitsPerDegree = [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter];\n  result.degreesPerUnit = [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter];\n\n  if (highPrecision) {\n    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    var unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;\n    var altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    var altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n      longitude = _lngLatZ[0],\n      latitude = _lngLatZ[1],\n      z0 = _lngLatZ[2];\n\n  var _xyz = _slicedToArray(xyz, 3),\n      x = _xyz[0],\n      y = _xyz[1],\n      z = _xyz[2];\n\n  var _getDistanceScales = getDistanceScales({\n    longitude: longitude,\n    latitude: latitude,\n    highPrecision: true\n  }),\n      unitsPerMeter = _getDistanceScales.unitsPerMeter,\n      unitsPerMeter2 = _getDistanceScales.unitsPerMeter2;\n\n  var worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n  var newLngLat = worldToLngLat(worldspace);\n  var newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(_ref7) {\n  var height = _ref7.height,\n      pitch = _ref7.pitch,\n      bearing = _ref7.bearing,\n      altitude = _ref7.altitude,\n      scale = _ref7.scale,\n      _ref7$center = _ref7.center,\n      center = _ref7$center === void 0 ? null : _ref7$center;\n  var vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  scale /= height;\n  mat4.scale(vm, vm, [scale, scale, scale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\nexport function getProjectionParameters(_ref8) {\n  var width = _ref8.width,\n      height = _ref8.height,\n      _ref8$altitude = _ref8.altitude,\n      altitude = _ref8$altitude === void 0 ? DEFAULT_ALTITUDE : _ref8$altitude,\n      _ref8$pitch = _ref8.pitch,\n      pitch = _ref8$pitch === void 0 ? 0 : _ref8$pitch,\n      _ref8$nearZMultiplier = _ref8.nearZMultiplier,\n      nearZMultiplier = _ref8$nearZMultiplier === void 0 ? 1 : _ref8$nearZMultiplier,\n      _ref8$farZMultiplier = _ref8.farZMultiplier,\n      farZMultiplier = _ref8$farZMultiplier === void 0 ? 1 : _ref8$farZMultiplier;\n  var pitchRadians = pitch * DEGREES_TO_RADIANS;\n  var halfFov = Math.atan(0.5 / altitude);\n  var topHalfSurfaceDistance = Math.sin(halfFov) * altitude / Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n  var farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + altitude;\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\nexport function getProjectionMatrix(_ref9) {\n  var width = _ref9.width,\n      height = _ref9.height,\n      pitch = _ref9.pitch,\n      altitude = _ref9.altitude,\n      nearZMultiplier = _ref9.nearZMultiplier,\n      farZMultiplier = _ref9.farZMultiplier;\n\n  var _getProjectionParamet = getProjectionParameters({\n    width: width,\n    height: height,\n    altitude: altitude,\n    pitch: pitch,\n    nearZMultiplier: nearZMultiplier,\n    farZMultiplier: farZMultiplier\n  }),\n      fov = _getProjectionParamet.fov,\n      aspect = _getProjectionParamet.aspect,\n      near = _getProjectionParamet.near,\n      far = _getProjectionParamet.far;\n\n  var projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  var _xyz2 = _slicedToArray(xyz, 3),\n      x = _xyz2[0],\n      y = _xyz2[1],\n      _xyz2$ = _xyz2[2],\n      z = _xyz2$ === void 0 ? 0 : _xyz2$;\n\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _xyz3 = _slicedToArray(xyz, 3),\n      x = _xyz3[0],\n      y = _xyz3[1],\n      z = _xyz3[2];\n\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  var z0 = coord0[2];\n  var z1 = coord1[2];\n  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"sources":["../../src/web-mercator-utils.js"],"names":["PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","lng","lat","assert","Number","lambda2","phi2","x","y","latitude","latCosine","scaleToZoom","longitude","highPrecision","result","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","z0","z","unitsPerMeter","unitsPerMeter2","getDistanceScales","worldspace","lngLatToWorld","newLngLat","worldToLngLat","newZ","height","pitch","bearing","altitude","scale","center","vm","createMat4","mat4","vec3","width","nearZMultiplier","farZMultiplier","pitchRadians","halfFov","topHalfSurfaceDistance","farZ","fov","aspect","focalDistance","near","far","getProjectionParameters","projectionMatrix","transformVector","targetZ","coord","coord0","coord1","z1","t","vec2"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nconst DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat]) {\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n// Unproject world point [x,y] on map onto {lat, lon} on sphere\nexport function worldToLngLat([x, y]) {\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\n\nexport function getDistanceScales({latitude, longitude, highPrecision = false}) {\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const result = {};\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.unitsPerMeter = [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter];\n  result.metersPerUnit = [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter];\n\n  result.unitsPerDegree = [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter];\n  result.degreesPerUnit = [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  // @ts-ignore\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  scale,\n  center = null\n}) {\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  scale /= height;\n  mat4.scale(vm, vm, [scale, scale, scale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  altitude = DEFAULT_ALTITUDE,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // Find the distance from the center point to the center top\n  // in altitude units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const halfFov = Math.atan(0.5 / altitude);\n  const topHalfSurfaceDistance =\n    (Math.sin(halfFov) * altitude) /\n    Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + altitude;\n\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} = getProjectionParameters({\n    width,\n    height,\n    altitude,\n    pitch,\n    nearZMultiplier,\n    farZMultiplier\n  });\n\n  const projectionMatrix = mat4.perspective(\n    [],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n// Unproject pixels on screen to flat coordinates.\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}\n"]},"metadata":{},"sourceType":"module"}