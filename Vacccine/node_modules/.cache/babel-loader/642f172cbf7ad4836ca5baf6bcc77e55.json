{"ast":null,"code":"var INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n\nfunction some(array, predict) {\n  for (var i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function enhancePointerEventInput(PointerEventInput) {\n  var oldHandler = PointerEventInput.prototype.handler;\n\n  PointerEventInput.prototype.handler = function handler(ev) {\n    var store = this.store;\n\n    if (ev.button > 0) {\n      if (!some(store, function (e) {\n        return e.pointerId === ev.pointerId;\n      })) {\n        store.push(ev);\n      }\n    }\n\n    oldHandler.call(this, ev);\n  };\n}\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    var eventType = MOUSE_INPUT_MAP[ev.type];\n\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/utils/hammer-overrides.js"],"names":["INPUT_START","INPUT_MOVE","INPUT_END","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","i","array","predict","oldHandler","PointerEventInput","store","ev","some","e","MouseInput","eventType","pointers","changedPointers","pointerType","srcEvent"],"mappings":"AAMA,IAAMA,WAAW,GAAjB,CAAA;AACA,IAAMC,UAAU,GAAhB,CAAA;AACA,IAAMC,SAAS,GAAf,CAAA;AACA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,SAAS,EADa,WAAA;AAEtBC,EAAAA,SAAS,EAFa,UAAA;AAGtBC,EAAAA,OAAO,EAAEJ;AAHa,CAAxB;;AAYA,SAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAA8B;AAC5B,OAAK,IAAIK,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,KAAK,CAAzB,MAAA,EAAkCD,CAAlC,EAAA,EAAuC;AACrC,QAAIE,OAAO,CAACD,KAAK,CAAjB,CAAiB,CAAN,CAAX,EAAuB;AACrB,aAAA,IAAA;AACD;AACF;;AACD,SAAA,KAAA;AACD;;AAGD,OAAO,SAAA,wBAAA,CAAA,iBAAA,EAAqD;AAC1D,MAAME,UAAU,GAAGC,iBAAiB,CAAjBA,SAAAA,CAAnB,OAAA;;AAGAA,EAAAA,iBAAiB,CAAjBA,SAAAA,CAAAA,OAAAA,GAAsC,SAAA,OAAA,CAAA,EAAA,EAAqB;AACzD,QAAMC,KAAK,GAAG,KAAd,KAAA;;AAGA,QAAIC,EAAE,CAAFA,MAAAA,GAAJ,CAAA,EAAmB;AACjB,UAAI,CAACC,IAAI,CAAA,KAAA,EAAQ,UAAA,CAAA,EAAC;AAAA,eAAIC,CAAC,CAADA,SAAAA,KAAgBF,EAAE,CAAtB,SAAA;AAAlB,OAAS,CAAT,EAAqD;AACnDD,QAAAA,KAAK,CAALA,IAAAA,CAAAA,EAAAA;AACD;AACF;;AAEDF,IAAAA,UAAU,CAAVA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA;AAVFC,GAAAA;AAYD;AAGD,OAAO,SAAA,iBAAA,CAAA,UAAA,EAAuC;AAC5CK,EAAAA,UAAU,CAAVA,SAAAA,CAAAA,OAAAA,GAA+B,SAAA,OAAA,CAAA,EAAA,EAAqB;AAClD,QAAIC,SAAS,GAAGd,eAAe,CAACU,EAAE,CAAlC,IAA+B,CAA/B;;AAGA,QAAII,SAAS,GAATA,WAAAA,IAA2BJ,EAAE,CAAFA,MAAAA,IAA/B,CAAA,EAA+C;AAC7C,WAAA,OAAA,GAAA,IAAA;AACD;;AAED,QAAII,SAAS,GAATA,UAAAA,IAA0BJ,EAAE,CAAFA,KAAAA,KAA9B,CAAA,EAA8C;AAC5CI,MAAAA,SAAS,GAATA,SAAAA;AACD;;AAGD,QAAI,CAAC,KAAL,OAAA,EAAmB;AACjB;AACD;;AAED,QAAIA,SAAS,GAAb,SAAA,EAA2B;AACzB,WAAA,OAAA,GAAA,KAAA;AACD;;AAED,SAAA,QAAA,CAAc,KAAd,OAAA,EAAA,SAAA,EAAuC;AACrCC,MAAAA,QAAQ,EAAE,CAD2B,EAC3B,CAD2B;AAErCC,MAAAA,eAAe,EAAE,CAFoB,EAEpB,CAFoB;AAGrCC,MAAAA,WAAW,EAH0B,OAAA;AAIrCC,MAAAA,QAAQ,EAAER;AAJ2B,KAAvC;AArBFG,GAAAA;AA4BD","sourcesContent":["/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* eslint-disable no-invalid-this */\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler;\n\n  // overrides PointerEventInput.handler to accept right mouse button\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store;\n\n    // Allow non-left mouse buttons through\n    if (ev.button > 0) {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n\n    oldHandler.call(this, ev);\n  };\n}\n\n// overrides MouseInput.handler to accept right mouse button\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type];\n\n    // on start we want to have the mouse button down\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n\n    // mouse must be down\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}