{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport * as React from 'react';\nimport { PureComponent, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport StaticMap from './static-map';\nimport { MAPBOX_LIMITS } from '../utils/map-state';\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport TransitionManager from '../utils/transition-manager';\nimport MapContext from './map-context';\nimport { EventManager } from 'mjolnir.js';\nimport MapController from '../utils/map-controller';\nimport deprecateWarn from '../utils/deprecate-warn';\nvar propTypes = Object.assign({}, StaticMap.propTypes, {\n  maxZoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  maxPitch: PropTypes.number,\n  minPitch: PropTypes.number,\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n  onInteractionStateChange: PropTypes.func,\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  transitionInterpolator: PropTypes.object,\n  transitionInterruption: PropTypes.number,\n  transitionEasing: PropTypes.func,\n  onTransitionStart: PropTypes.func,\n  onTransitionInterrupt: PropTypes.func,\n  onTransitionEnd: PropTypes.func,\n  scrollZoom: PropTypes.bool,\n  dragPan: PropTypes.bool,\n  dragRotate: PropTypes.bool,\n  doubleClickZoom: PropTypes.bool,\n  touchZoom: PropTypes.bool,\n  touchRotate: PropTypes.bool,\n  keyboard: PropTypes.bool,\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onDblClick: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onTouchStart: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onWheel: PropTypes.func,\n  touchAction: PropTypes.string,\n  clickRadius: PropTypes.number,\n  interactiveLayerIds: PropTypes.array,\n  getCursor: PropTypes.func,\n  controller: PropTypes.instanceOf(MapController)\n});\n\nvar getDefaultCursor = function getDefaultCursor(_ref) {\n  var isDragging = _ref.isDragging,\n      isHovering = _ref.isHovering;\n  return isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab';\n};\n\nvar defaultProps = Object.assign({}, StaticMap.defaultProps, MAPBOX_LIMITS, TransitionManager.defaultProps, {\n  onViewStateChange: null,\n  onViewportChange: null,\n  onClick: null,\n  onNativeClick: null,\n  onHover: null,\n  onContextMenu: function onContextMenu(event) {\n    return event.preventDefault();\n  },\n  scrollZoom: true,\n  dragPan: true,\n  dragRotate: true,\n  doubleClickZoom: true,\n  touchZoom: true,\n  touchRotate: false,\n  keyboard: true,\n  touchAction: 'none',\n  clickRadius: 0,\n  getCursor: getDefaultCursor\n});\n\nvar InteractiveMap = function (_PureComponent) {\n  _inherits(InteractiveMap, _PureComponent);\n\n  var _super = _createSuper(InteractiveMap);\n\n  _createClass(InteractiveMap, null, [{\n    key: \"supported\",\n    value: function supported() {\n      return StaticMap.supported();\n    }\n  }]);\n\n  function InteractiveMap(props) {\n    var _this;\n\n    _classCallCheck(this, InteractiveMap);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isLoaded: false,\n      isDragging: false,\n      isHovering: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_controller\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_eventManager\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_interactiveContext\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_width\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_height\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_eventCanvasRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_staticMapRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getMap\", function () {\n      return _this._staticMapRef.current ? _this._staticMapRef.current.getMap() : null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"queryRenderedFeatures\", function (geometry) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var map = _this.getMap();\n\n      return map && map.queryRenderedFeatures(geometry, options);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onInteractionStateChange\", function (interactionState) {\n      var _interactionState$isD = interactionState.isDragging,\n          isDragging = _interactionState$isD === void 0 ? false : _interactionState$isD;\n\n      if (isDragging !== _this.state.isDragging) {\n        _this._updateInteractiveContext({\n          isDragging: isDragging\n        });\n\n        _this.setState({\n          isDragging: isDragging\n        });\n      }\n\n      var onInteractionStateChange = _this.props.onInteractionStateChange;\n\n      if (onInteractionStateChange) {\n        onInteractionStateChange(interactionState);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onResize\", function (_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height;\n      _this._width = width;\n      _this._height = height;\n\n      _this._setControllerProps(_this.props);\n\n      _this.props.onResize({\n        width: width,\n        height: height\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onViewportChange\", function (viewState, interactionState, oldViewState) {\n      var _this$props = _this.props,\n          onViewStateChange = _this$props.onViewStateChange,\n          onViewportChange = _this$props.onViewportChange;\n\n      if (onViewStateChange) {\n        onViewStateChange({\n          viewState: viewState,\n          interactionState: interactionState,\n          oldViewState: oldViewState\n        });\n      }\n\n      if (onViewportChange) {\n        onViewportChange(viewState, interactionState, oldViewState);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onLoad\", function (event) {\n      _this.setState({\n        isLoaded: true\n      });\n\n      _this.props.onLoad(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onEvent\", function (callbackName, event) {\n      var func = _this.props[callbackName];\n\n      if (func) {\n        func(_this._normalizeEvent(event));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPointerDown\", function (event) {\n      switch (event.pointerType) {\n        case 'touch':\n          _this._onEvent('onTouchStart', event);\n\n          break;\n\n        default:\n          _this._onEvent('onMouseDown', event);\n\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPointerUp\", function (event) {\n      switch (event.pointerType) {\n        case 'touch':\n          _this._onEvent('onTouchEnd', event);\n\n          break;\n\n        default:\n          _this._onEvent('onMouseUp', event);\n\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPointerMove\", function (event) {\n      switch (event.pointerType) {\n        case 'touch':\n          _this._onEvent('onTouchMove', event);\n\n          break;\n\n        default:\n          _this._onEvent('onMouseMove', event);\n\n      }\n\n      if (!_this.state.isDragging) {\n        var _this$props2 = _this.props,\n            onHover = _this$props2.onHover,\n            interactiveLayerIds = _this$props2.interactiveLayerIds;\n        var features;\n        event = _this._normalizeEvent(event);\n\n        if (_this.state.isLoaded && (interactiveLayerIds || onHover)) {\n          features = _this._getFeatures({\n            pos: event.point,\n            radius: _this.props.clickRadius\n          });\n        }\n\n        if (onHover) {\n          event.features = features;\n          onHover(event);\n        }\n\n        var isHovering = Boolean(interactiveLayerIds && features && features.length > 0);\n        var isEntering = isHovering && !_this.state.isHovering;\n        var isExiting = !isHovering && _this.state.isHovering;\n\n        if (isEntering) {\n          _this._onEvent('onMouseEnter', event);\n        }\n\n        if (isExiting) {\n          _this._onEvent('onMouseLeave', event);\n        }\n\n        if (isEntering || isExiting) {\n          _this.setState({\n            isHovering: isHovering\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onClick\", function (event) {\n      var _this$props3 = _this.props,\n          onClick = _this$props3.onClick,\n          onNativeClick = _this$props3.onNativeClick,\n          onDblClick = _this$props3.onDblClick,\n          doubleClickZoom = _this$props3.doubleClickZoom;\n      var callbacks = [];\n      var isDoubleClickEnabled = onDblClick || doubleClickZoom;\n\n      switch (event.type) {\n        case 'anyclick':\n          callbacks.push(onNativeClick);\n\n          if (!isDoubleClickEnabled) {\n            callbacks.push(onClick);\n          }\n\n          break;\n\n        case 'click':\n          if (isDoubleClickEnabled) {\n            callbacks.push(onClick);\n          }\n\n          break;\n\n        default:\n      }\n\n      callbacks = callbacks.filter(Boolean);\n\n      if (callbacks.length) {\n        event = _this._normalizeEvent(event);\n        event.features = _this._getFeatures({\n          pos: event.point,\n          radius: _this.props.clickRadius\n        });\n        callbacks.forEach(function (cb) {\n          return cb(event);\n        });\n      }\n    });\n\n    deprecateWarn(props);\n    _this._controller = props.controller || new MapController();\n    _this._eventManager = new EventManager(null, {\n      touchAction: props.touchAction\n    });\n\n    _this._updateInteractiveContext({\n      isDragging: false,\n      eventManager: _this._eventManager\n    });\n\n    return _this;\n  }\n\n  _createClass(InteractiveMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var eventManager = this._eventManager;\n      var mapContainer = this._eventCanvasRef.current;\n      eventManager.setElement(mapContainer);\n      eventManager.on({\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerup: this._onPointerUp,\n        pointerleave: this._onEvent.bind(this, 'onMouseOut'),\n        click: this._onClick,\n        anyclick: this._onClick,\n        dblclick: this._onEvent.bind(this, 'onDblClick'),\n        wheel: this._onEvent.bind(this, 'onWheel'),\n        contextmenu: this._onEvent.bind(this, 'onContextMenu')\n      });\n\n      this._setControllerProps(this.props);\n\n      this._updateInteractiveContext({\n        mapContainer: mapContainer\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._setControllerProps(this.props);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._eventManager.destroy();\n    }\n  }, {\n    key: \"_setControllerProps\",\n    value: function _setControllerProps(props) {\n      props = Object.assign({}, props, props.viewState, {\n        isInteractive: Boolean(props.onViewStateChange || props.onViewportChange),\n        onViewportChange: this._onViewportChange,\n        onStateChange: this._onInteractionStateChange,\n        eventManager: this._eventManager,\n        width: this._width,\n        height: this._height\n      });\n\n      this._controller.setOptions(props);\n\n      var context = this._interactiveContext;\n      context.onViewportChange = props.onViewportChange;\n      context.onViewStateChange = props.onViewStateChange;\n    }\n  }, {\n    key: \"_getFeatures\",\n    value: function _getFeatures(_ref3) {\n      var pos = _ref3.pos,\n          radius = _ref3.radius;\n      var features;\n      var queryParams = {};\n      var map = this.getMap();\n\n      if (this.props.interactiveLayerIds) {\n        queryParams.layers = this.props.interactiveLayerIds;\n      }\n\n      if (radius) {\n        var size = radius;\n        var bbox = [[pos[0] - size, pos[1] + size], [pos[0] + size, pos[1] - size]];\n        features = map && map.queryRenderedFeatures(bbox, queryParams);\n      } else {\n        features = map && map.queryRenderedFeatures(pos, queryParams);\n      }\n\n      return features;\n    }\n  }, {\n    key: \"_updateInteractiveContext\",\n    value: function _updateInteractiveContext(updatedContext) {\n      this._interactiveContext = Object.assign({}, this._interactiveContext, updatedContext);\n    }\n  }, {\n    key: \"_normalizeEvent\",\n    value: function _normalizeEvent(event) {\n      if (event.lngLat) {\n        return event;\n      }\n\n      var _event$offsetCenter = event.offsetCenter,\n          x = _event$offsetCenter.x,\n          y = _event$offsetCenter.y;\n      var pos = [x, y];\n      var viewport = new WebMercatorViewport(Object.assign({}, this.props, {\n        width: this._width,\n        height: this._height\n      }));\n      event.point = pos;\n      event.lngLat = viewport.unproject(pos);\n      return event;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          width = _this$props4.width,\n          height = _this$props4.height,\n          style = _this$props4.style,\n          getCursor = _this$props4.getCursor;\n      var eventCanvasStyle = Object.assign({\n        position: 'relative'\n      }, style, {\n        width: width,\n        height: height,\n        cursor: getCursor(this.state)\n      });\n      return React.createElement(MapContext.Provider, {\n        value: this._interactiveContext\n      }, React.createElement(\"div\", {\n        key: \"event-canvas\",\n        ref: this._eventCanvasRef,\n        style: eventCanvasStyle\n      }, React.createElement(StaticMap, _extends({}, this.props, {\n        width: \"100%\",\n        height: \"100%\",\n        style: null,\n        onResize: this._onResize,\n        onLoad: this._onLoad,\n        ref: this._staticMapRef\n      }), this.props.children)));\n    }\n  }]);\n\n  return InteractiveMap;\n}(PureComponent);\n\n_defineProperty(InteractiveMap, \"propTypes\", propTypes);\n\n_defineProperty(InteractiveMap, \"defaultProps\", defaultProps);\n\nexport { InteractiveMap as default };","map":{"version":3,"sources":["../../../src/components/interactive-map.js"],"names":["propTypes","StaticMap","maxZoom","PropTypes","minZoom","maxPitch","minPitch","onViewStateChange","onViewportChange","onInteractionStateChange","transitionDuration","transitionInterpolator","transitionInterruption","transitionEasing","onTransitionStart","onTransitionInterrupt","onTransitionEnd","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","onHover","onClick","onDblClick","onContextMenu","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","onMouseEnter","onMouseLeave","onMouseOut","onWheel","touchAction","clickRadius","interactiveLayerIds","getCursor","controller","getDefaultCursor","isDragging","isHovering","defaultProps","TransitionManager","onNativeClick","event","InteractiveMap","PureComponent","deprecateWarn","props","eventManager","_eventManager","isLoaded","mapContainer","pointerdown","pointermove","pointerup","pointerleave","click","anyclick","dblclick","wheel","contextmenu","createRef","options","map","isInteractive","Boolean","onStateChange","width","height","_height","context","pos","radius","queryParams","size","bbox","features","interactionState","updatedContext","Object","viewState","oldViewState","x","y","viewport","func","isEntering","isExiting","callbacks","isDoubleClickEnabled","cb","style","eventCanvasStyle","position","cursor","_interactiveContext","_staticMapRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,EAAA,SAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,OAAA,SAAA,MAAA,cAAA;AACA,SAAA,aAAA,QAAA,oBAAA;AACA,OAAA,mBAAA,MAAA,2BAAA;AAEA,OAAA,iBAAA,MAAA,6BAAA;AACA,OAAA,UAAA,MAAA,eAAA;AAEA,SAAA,YAAA,QAAA,YAAA;AACA,OAAA,aAAA,MAAA,yBAAA;AACA,OAAA,aAAA,MAAA,yBAAA;AAOA,IAAMA,SAAS,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkBC,SAAS,CAA3B,SAAA,EAAuC;AAKvDC,EAAAA,OAAO,EAAEC,SAAS,CALqC,MAAA;AAOvDC,EAAAA,OAAO,EAAED,SAAS,CAPqC,MAAA;AASvDE,EAAAA,QAAQ,EAAEF,SAAS,CAToC,MAAA;AAWvDG,EAAAA,QAAQ,EAAEH,SAAS,CAXoC,MAAA;AAevDI,EAAAA,iBAAiB,EAAEJ,SAAS,CAf2B,IAAA;AAgBvDK,EAAAA,gBAAgB,EAAEL,SAAS,CAhB4B,IAAA;AAiBvDM,EAAAA,wBAAwB,EAAEN,SAAS,CAjBoB,IAAA;AAqBvDO,EAAAA,kBAAkB,EAAEP,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CArBb,MAqBf,CAApBA,CArBmC;AAuBvDQ,EAAAA,sBAAsB,EAAER,SAAS,CAvBsB,MAAA;AAyBvDS,EAAAA,sBAAsB,EAAET,SAAS,CAzBsB,MAAA;AA2BvDU,EAAAA,gBAAgB,EAAEV,SAAS,CA3B4B,IAAA;AA6BvDW,EAAAA,iBAAiB,EAAEX,SAAS,CA7B2B,IAAA;AA8BvDY,EAAAA,qBAAqB,EAAEZ,SAAS,CA9BuB,IAAA;AA+BvDa,EAAAA,eAAe,EAAEb,SAAS,CA/B6B,IAAA;AAmCvDc,EAAAA,UAAU,EAAEd,SAAS,CAnCkC,IAAA;AAqCvDe,EAAAA,OAAO,EAAEf,SAAS,CArCqC,IAAA;AAuCvDgB,EAAAA,UAAU,EAAEhB,SAAS,CAvCkC,IAAA;AAyCvDiB,EAAAA,eAAe,EAAEjB,SAAS,CAzC6B,IAAA;AA2CvDkB,EAAAA,SAAS,EAAElB,SAAS,CA3CmC,IAAA;AA6CvDmB,EAAAA,WAAW,EAAEnB,SAAS,CA7CiC,IAAA;AA+CvDoB,EAAAA,QAAQ,EAAEpB,SAAS,CA/CoC,IAAA;AAkDvDqB,EAAAA,OAAO,EAAErB,SAAS,CAlDqC,IAAA;AAmDvDsB,EAAAA,OAAO,EAAEtB,SAAS,CAnDqC,IAAA;AAoDvDuB,EAAAA,UAAU,EAAEvB,SAAS,CApDkC,IAAA;AAqDvDwB,EAAAA,aAAa,EAAExB,SAAS,CArD+B,IAAA;AAsDvDyB,EAAAA,WAAW,EAAEzB,SAAS,CAtDiC,IAAA;AAuDvD0B,EAAAA,WAAW,EAAE1B,SAAS,CAvDiC,IAAA;AAwDvD2B,EAAAA,SAAS,EAAE3B,SAAS,CAxDmC,IAAA;AAyDvD4B,EAAAA,YAAY,EAAE5B,SAAS,CAzDgC,IAAA;AA0DvD6B,EAAAA,WAAW,EAAE7B,SAAS,CA1DiC,IAAA;AA2DvD8B,EAAAA,UAAU,EAAE9B,SAAS,CA3DkC,IAAA;AA4DvD+B,EAAAA,YAAY,EAAE/B,SAAS,CA5DgC,IAAA;AA6DvDgC,EAAAA,YAAY,EAAEhC,SAAS,CA7DgC,IAAA;AA8DvDiC,EAAAA,UAAU,EAAEjC,SAAS,CA9DkC,IAAA;AA+DvDkC,EAAAA,OAAO,EAAElC,SAAS,CA/DqC,IAAA;AAkEvDmC,EAAAA,WAAW,EAAEnC,SAAS,CAlEiC,MAAA;AAqEvDoC,EAAAA,WAAW,EAAEpC,SAAS,CArEiC,MAAA;AAwEvDqC,EAAAA,mBAAmB,EAAErC,SAAS,CAxEyB,KAAA;AA2EvDsC,EAAAA,SAAS,EAAEtC,SAAS,CA3EmC,IAAA;AA+EvDuC,EAAAA,UAAU,EAAEvC,SAAS,CAATA,UAAAA,CAAAA,aAAAA;AA/E2C,CAAvC,CAAlB;;AAwFA,IAAMwC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAA;AAAA,MAAEC,UAAF,GAAA,IAAA,CAAA,UAAA;AAAA,MAAcC,UAAd,GAAA,IAAA,CAAA,UAAA;AAAA,SACvBD,UAAU,GAAA,UAAA,GAAgBC,UAAU,GAAA,SAAA,GADb,MAAA;AAAzB,CAAA;;AAGA,IAAMC,YAAY,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAEnB7C,SAAS,CAFU,YAAA,EAAA,aAAA,EAInB8C,iBAAiB,CAJE,YAAA,EAKnB;AACExC,EAAAA,iBAAiB,EADnB,IAAA;AAEEC,EAAAA,gBAAgB,EAFlB,IAAA;AAGEiB,EAAAA,OAAO,EAHT,IAAA;AAIEuB,EAAAA,aAAa,EAJf,IAAA;AAKExB,EAAAA,OAAO,EALT,IAAA;AAMEG,EAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,KAAA,EAAA;AAAA,WAAuBsB,KAAK,CAA5B,cAAuBA,EAAvB;AANjB,GAAA;AAQEhC,EAAAA,UAAU,EARZ,IAAA;AASEC,EAAAA,OAAO,EATT,IAAA;AAUEC,EAAAA,UAAU,EAVZ,IAAA;AAWEC,EAAAA,eAAe,EAXjB,IAAA;AAYEC,EAAAA,SAAS,EAZX,IAAA;AAaEC,EAAAA,WAAW,EAbb,KAAA;AAcEC,EAAAA,QAAQ,EAdV,IAAA;AAgBEe,EAAAA,WAAW,EAhBb,MAAA;AAiBEC,EAAAA,WAAW,EAjBb,CAAA;AAkBEE,EAAAA,SAAS,EAAEE;AAlBb,CALmB,CAArB;;IA6EqBO,c;;;;;;;gCACA;AACjB,aAAOjD,SAAS,CAAhB,SAAOA,EAAP;AACD;;;AAKD,WAAA,cAAA,CAAA,KAAA,EAAwC;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AACtC,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;AADsC,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,OAAA,EAmBzB;AAEbuD,MAAAA,QAAQ,EAFK,KAAA;AAIbZ,MAAAA,UAAU,EAJG,KAAA;AAMbC,MAAAA,UAAU,EAAE;AANC,KAnByB,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,qBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAA,EAgEYsB,SAhEZ,EAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAiEKA,SAjEL,EAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAmE/B,YAAM;AACb,aAAO,KAAA,CAAA,aAAA,CAAA,OAAA,GAA6B,KAAA,CAAA,aAAA,CAAA,OAAA,CAA7B,MAA6B,EAA7B,GAAP,IAAA;AApEsC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,uBAAA,EAuEhB,UAAA,QAAA,EAAsC;AAAA,UAAtBC,OAAsB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAO;;AAC5D,UAAMC,GAAG,GAAG,KAAA,CAAZ,MAAY,EAAZ;;AACA,aAAOA,GAAG,IAAIA,GAAG,CAAHA,qBAAAA,CAAAA,QAAAA,EAAd,OAAcA,CAAd;AAzEsC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,2BAAA,EAmHZ,UAAA,gBAAA,EAAwC;AAAA,UAAA,qBAAA,GACrCc,gBADqC,CAAA,UAAA;AAAA,UAC3DvC,UAD2D,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,qBAAA;;AAElE,UAAIA,UAAU,KAAK,KAAA,CAAA,KAAA,CAAnB,UAAA,EAA0C;AACxC,QAAA,KAAA,CAAA,yBAAA,CAA+B;AAACA,UAAAA,UAAU,EAAVA;AAAD,SAA/B;;AACA,QAAA,KAAA,CAAA,QAAA,CAAc;AAACA,UAAAA,UAAU,EAAVA;AAAD,SAAd;AACD;;AALiE,UAO3DnC,wBAP2D,GAO/B,KAAA,CAP+B,KAO/B,CAP+B,wBAAA;;AAQlE,UAAA,wBAAA,EAA8B;AAC5BA,QAAAA,wBAAwB,CAAxBA,gBAAwB,CAAxBA;AACD;AA7HqC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,WAAA,EAoI5B,UAAA,KAAA,EAAsD;AAAA,UAApDgE,KAAoD,GAAA,KAAA,CAApDA,KAAoD;AAAA,UAA7CC,MAA6C,GAAA,KAAA,CAA7CA,MAA6C;AAChE,MAAA,KAAA,CAAA,MAAA,GAAA,KAAA;AACA,MAAA,KAAA,CAAA,OAAA,GAAA,MAAA;;AACA,MAAA,KAAA,CAAA,mBAAA,CAAyB,KAAA,CAAzB,KAAA;;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAoB;AAACD,QAAAA,KAAK,EAAN,KAAA;AAAQC,QAAAA,MAAM,EAANA;AAAR,OAApB;AAxIsC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,mBAAA,EA2IpB,UAAA,SAAA,EAAA,gBAAA,EAAA,YAAA,EAIf;AAAA,UAAA,WAAA,GAC2C,KAAA,CAD3C,KAAA;AAAA,UACInE,iBADJ,GAAA,WAAA,CAAA,iBAAA;AAAA,UACuBC,gBADvB,GAAA,WAAA,CAAA,gBAAA;;AAGH,UAAA,iBAAA,EAAuB;AACrBD,QAAAA,iBAAiB,CAAC;AAAC+E,UAAAA,SAAS,EAAV,SAAA;AAAYH,UAAAA,gBAAgB,EAA5B,gBAAA;AAA8BI,UAAAA,YAAY,EAAZA;AAA9B,SAAD,CAAjBhF;AACD;;AACD,UAAA,gBAAA,EAAsB;AACpBC,QAAAA,gBAAgB,CAAA,SAAA,EAAA,gBAAA,EAAhBA,YAAgB,CAAhBA;AACD;AAvJqC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EAoL9B,UAAA,KAAA,EAAqB;AAC7B,MAAA,KAAA,CAAA,QAAA,CAAc;AAACgD,QAAAA,QAAQ,EAAE;AAAX,OAAd;;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA;AAtLsC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAyL7B,UAAA,YAAA,EAAA,KAAA,EAA2C;AACpD,UAAMmC,IAAI,GAAG,KAAA,CAAA,KAAA,CAAb,YAAa,CAAb;;AACA,UAAA,IAAA,EAAU;AACRA,QAAAA,IAAI,CAAC,KAAA,CAAA,eAAA,CAALA,KAAK,CAAD,CAAJA;AACD;AA7LqC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAiMvB,UAAA,KAAA,EAAqB;AACpC,cAAQ1C,KAAK,CAAb,WAAA;AACE,aAAA,OAAA;AACE,UAAA,KAAA,CAAA,QAAA,CAAA,cAAA,EAAA,KAAA;;AACA;;AAEF;AACE,UAAA,KAAA,CAAA,QAAA,CAAA,aAAA,EAAA,KAAA;;AANJ;AAlMsC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EA4MzB,UAAA,KAAA,EAAqB;AAClC,cAAQA,KAAK,CAAb,WAAA;AACE,aAAA,OAAA;AACE,UAAA,KAAA,CAAA,QAAA,CAAA,YAAA,EAAA,KAAA;;AACA;;AAEF;AACE,UAAA,KAAA,CAAA,QAAA,CAAA,WAAA,EAAA,KAAA;;AANJ;AA7MsC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EAwNvB,UAAA,KAAA,EAAqB;AACpC,cAAQA,KAAK,CAAb,WAAA;AACE,aAAA,OAAA;AACE,UAAA,KAAA,CAAA,QAAA,CAAA,aAAA,EAAA,KAAA;;AACA;;AAEF;AACE,UAAA,KAAA,CAAA,QAAA,CAAA,aAAA,EAAA,KAAA;;AANJ;;AASA,UAAI,CAAC,KAAA,CAAA,KAAA,CAAL,UAAA,EAA4B;AAAA,YAAA,YAAA,GACa,KAAA,CADb,KAAA;AAAA,YACnBzB,OADmB,GAAA,YAAA,CAAA,OAAA;AAAA,YACVgB,mBADU,GAAA,YAAA,CAAA,mBAAA;AAE1B,YAAA,QAAA;AACAS,QAAAA,KAAK,GAAG,KAAA,CAAA,eAAA,CAARA,KAAQ,CAARA;;AACA,YAAI,KAAA,CAAA,KAAA,CAAA,QAAA,KAAwBT,mBAAmB,IAA/C,OAAI,CAAJ,EAA6D;AAC3D0C,UAAAA,QAAQ,GAAG,KAAA,CAAA,YAAA,CAAkB;AAC3BL,YAAAA,GAAG,EAAE5B,KAAK,CADiB,KAAA;AAE3B6B,YAAAA,MAAM,EAAE,KAAA,CAAA,KAAA,CAAWvC;AAFQ,WAAlB,CAAX2C;AAID;;AACD,YAAA,OAAA,EAAa;AAEXjC,UAAAA,KAAK,CAALA,QAAAA,GAAAA,QAAAA;AACAzB,UAAAA,OAAO,CAAPA,KAAO,CAAPA;AACD;;AAED,YAAMqB,UAAU,GAAG0B,OAAO,CAAC/B,mBAAmB,IAAnBA,QAAAA,IAAmC0C,QAAQ,CAARA,MAAAA,GAA9D,CAA0B,CAA1B;AACA,YAAMU,UAAU,GAAG/C,UAAU,IAAI,CAAC,KAAA,CAAA,KAAA,CAAlC,UAAA;AACA,YAAMgD,SAAS,GAAG,CAAA,UAAA,IAAe,KAAA,CAAA,KAAA,CAAjC,UAAA;;AAEA,YAAA,UAAA,EAAgB;AACd,UAAA,KAAA,CAAA,QAAA,CAAA,cAAA,EAAA,KAAA;AACD;;AACD,YAAA,SAAA,EAAe;AACb,UAAA,KAAA,CAAA,QAAA,CAAA,cAAA,EAAA,KAAA;AACD;;AACD,YAAID,UAAU,IAAd,SAAA,EAA6B;AAC3B,UAAA,KAAA,CAAA,QAAA,CAAc;AAAC/C,YAAAA,UAAU,EAAVA;AAAD,WAAd;AACD;AACF;AA/PqC,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAkQ7B,UAAA,KAAA,EAAqB;AAAA,UAAA,YAAA,GACgC,KAAA,CADhC,KAAA;AAAA,UACvBpB,OADuB,GAAA,YAAA,CAAA,OAAA;AAAA,UACduB,aADc,GAAA,YAAA,CAAA,aAAA;AAAA,UACCtB,UADD,GAAA,YAAA,CAAA,UAAA;AAAA,UACaN,eADb,GAAA,YAAA,CAAA,eAAA;AAE9B,UAAI0E,SAAS,GAAb,EAAA;AACA,UAAMC,oBAAoB,GAAGrE,UAAU,IAAvC,eAAA;;AAOA,cAAQuB,KAAK,CAAb,IAAA;AACE,aAAA,UAAA;AACE6C,UAAAA,SAAS,CAATA,IAAAA,CAAAA,aAAAA;;AACA,cAAI,CAAJ,oBAAA,EAA2B;AACzBA,YAAAA,SAAS,CAATA,IAAAA,CAAAA,OAAAA;AACD;;AACD;;AAEF,aAAA,OAAA;AACE,cAAA,oBAAA,EAA0B;AACxBA,YAAAA,SAAS,CAATA,IAAAA,CAAAA,OAAAA;AACD;;AACD;;AAEF;AAdF;;AAiBAA,MAAAA,SAAS,GAAGA,SAAS,CAATA,MAAAA,CAAZA,OAAYA,CAAZA;;AAEA,UAAIA,SAAS,CAAb,MAAA,EAAsB;AACpB7C,QAAAA,KAAK,GAAG,KAAA,CAAA,eAAA,CAARA,KAAQ,CAARA;AAEAA,QAAAA,KAAK,CAALA,QAAAA,GAAiB,KAAA,CAAA,YAAA,CAAkB;AACjC4B,UAAAA,GAAG,EAAE5B,KAAK,CADuB,KAAA;AAEjC6B,UAAAA,MAAM,EAAE,KAAA,CAAA,KAAA,CAAWvC;AAFc,SAAlB,CAAjBU;AAIA6C,QAAAA,SAAS,CAATA,OAAAA,CAAkB,UAAA,EAAA,EAAE;AAAA,iBAAIE,EAAE,CAAN,KAAM,CAAN;AAApBF,SAAAA;AACD;AAvSqC,KAAA,CAAA;;AAGtC1C,IAAAA,aAAa,CAAbA,KAAa,CAAbA;AAIA,IAAA,KAAA,CAAA,WAAA,GAAmBC,KAAK,CAALA,UAAAA,IAAoB,IAAvC,aAAuC,EAAvC;AAEA,IAAA,KAAA,CAAA,aAAA,GAAqB,IAAA,YAAA,CAAA,IAAA,EAAuB;AAC1Cf,MAAAA,WAAW,EAAEe,KAAK,CAACf;AADuB,KAAvB,CAArB;;AAIA,IAAA,KAAA,CAAA,yBAAA,CAA+B;AAC7BM,MAAAA,UAAU,EADmB,KAAA;AAE7BU,MAAAA,YAAY,EAAE,KAAA,CAAKC;AAFU,KAA/B;;AAbsC,WAAA,KAAA;AAiBvC;;;;wCAWmB;AAClB,UAAMD,YAAY,GAAG,KAArB,aAAA;AAEA,UAAMG,YAAY,GAAG,KAAA,eAAA,CAArB,OAAA;AACAH,MAAAA,YAAY,CAAZA,UAAAA,CAAAA,YAAAA;AAEAA,MAAAA,YAAY,CAAZA,EAAAA,CAAgB;AACdI,QAAAA,WAAW,EAAE,KADC,cAAA;AAEdC,QAAAA,WAAW,EAAE,KAFC,cAAA;AAGdC,QAAAA,SAAS,EAAE,KAHG,YAAA;AAIdC,QAAAA,YAAY,EAAE,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA,EAJA,YAIA,CAJA;AAKdC,QAAAA,KAAK,EAAE,KALO,QAAA;AAMdC,QAAAA,QAAQ,EAAE,KANI,QAAA;AAOdC,QAAAA,QAAQ,EAAE,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA,EAPI,YAOJ,CAPI;AAQdC,QAAAA,KAAK,EAAE,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA,EARO,SAQP,CARO;AASdC,QAAAA,WAAW,EAAE,KAAA,QAAA,CAAA,IAAA,CAAA,IAAA,EAAA,eAAA;AATC,OAAhBZ;;AAYA,WAAA,mBAAA,CAAyB,KAAzB,KAAA;;AAEA,WAAA,yBAAA,CAA+B;AAACG,QAAAA,YAAY,EAAZA;AAAD,OAA/B;AACD;;;yCAEoB;AACnB,WAAA,mBAAA,CAAyB,KAAzB,KAAA;AACD;;;2CAEsB;AACrB,WAAA,aAAA,CAAA,OAAA;AACD;;;wCAmBmBJ,K,EAA4B;AAC9CA,MAAAA,KAAK,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAAyBA,KAAK,CAA9B,SAAA,EAA0C;AAChDiB,QAAAA,aAAa,EAAEC,OAAO,CAAClB,KAAK,CAALA,iBAAAA,IAA2BA,KAAK,CADP,gBAC1B,CAD0B;AAEhD7C,QAAAA,gBAAgB,EAAE,KAF8B,iBAAA;AAGhDgE,QAAAA,aAAa,EAAE,KAHiC,yBAAA;AAIhDlB,QAAAA,YAAY,EAAE,KAJkC,aAAA;AAKhDmB,QAAAA,KAAK,EAAE,KALyC,MAAA;AAMhDC,QAAAA,MAAM,EAAE,KAAKC;AANmC,OAA1C,CAARtB;;AASA,WAAA,WAAA,CAAA,UAAA,CAAA,KAAA;;AAIA,UAAMuB,OAAO,GAAG,KAAhB,mBAAA;AACAA,MAAAA,OAAO,CAAPA,gBAAAA,GAA2BvB,KAAK,CAAhCuB,gBAAAA;AACAA,MAAAA,OAAO,CAAPA,iBAAAA,GAA4BvB,KAAK,CAAjCuB,iBAAAA;AACD;;;wCAEiE;AAAA,UAApDC,GAAoD,GAAA,KAAA,CAApDA,GAAoD;AAAA,UAA/CC,MAA+C,GAAA,KAAA,CAA/CA,MAA+C;AAChE,UAAA,QAAA;AACA,UAAMC,WAAW,GAAjB,EAAA;AACA,UAAMV,GAAG,GAAG,KAAZ,MAAY,EAAZ;;AAEA,UAAI,KAAA,KAAA,CAAJ,mBAAA,EAAoC;AAClCU,QAAAA,WAAW,CAAXA,MAAAA,GAAqB,KAAA,KAAA,CAArBA,mBAAAA;AACD;;AAED,UAAA,MAAA,EAAY;AAEV,YAAMC,IAAI,GAAV,MAAA;AACA,YAAMC,IAAI,GAAG,CAAC,CAACJ,GAAG,CAAHA,CAAG,CAAHA,GAAD,IAAA,EAAgBA,GAAG,CAAHA,CAAG,CAAHA,GAAjB,IAAC,CAAD,EAAiC,CAACA,GAAG,CAAHA,CAAG,CAAHA,GAAD,IAAA,EAAgBA,GAAG,CAAHA,CAAG,CAAHA,GAA9D,IAA8C,CAAjC,CAAb;AACAK,QAAAA,QAAQ,GAAGb,GAAG,IAAIA,GAAG,CAAHA,qBAAAA,CAAAA,IAAAA,EAAlBa,WAAkBb,CAAlBa;AAJF,OAAA,MAKO;AACLA,QAAAA,QAAQ,GAAGb,GAAG,IAAIA,GAAG,CAAHA,qBAAAA,CAAAA,GAAAA,EAAlBa,WAAkBb,CAAlBa;AACD;;AACD,aAAA,QAAA;AACD;;;8CAeyBE,c,EAAyC;AACjE,WAAA,mBAAA,GAA2BC,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkB,KAAlBA,mBAAAA,EAA3B,cAA2BA,CAA3B;AACD;;;oCAyBepC,K,EAAiB;AAC/B,UAAIA,KAAK,CAAT,MAAA,EAAkB;AAEhB,eAAA,KAAA;AACD;;AAJ8B,UAAA,mBAAA,GAQ3BA,KAR2B,CAAA,YAAA;AAAA,UAOduC,CAPc,GAAA,mBAAA,CAAA,CAAA;AAAA,UAOXC,CAPW,GAAA,mBAAA,CAAA,CAAA;AAS/B,UAAMZ,GAAG,GAAG,CAAA,CAAA,EAAZ,CAAY,CAAZ;AAEA,UAAMa,QAAQ,GAAG,IAAA,mBAAA,CAEf,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkB,KAAlB,KAAA,EAA8B;AAC5BjB,QAAAA,KAAK,EAAE,KADqB,MAAA;AAE5BC,QAAAA,MAAM,EAAE,KAAKC;AAFe,OAA9B,CAFe,CAAjB;AAQA1B,MAAAA,KAAK,CAALA,KAAAA,GAAAA,GAAAA;AACAA,MAAAA,KAAK,CAALA,MAAAA,GAAeyC,QAAQ,CAARA,SAAAA,CAAfzC,GAAeyC,CAAfzC;AAEA,aAAA,KAAA;AACD;;;6BAwHQ;AAAA,UAAA,YAAA,GACmC,KADnC,KAAA;AAAA,UACAwB,KADA,GAAA,YAAA,CAAA,KAAA;AAAA,UACOC,MADP,GAAA,YAAA,CAAA,MAAA;AAAA,UACeuB,KADf,GAAA,YAAA,CAAA,KAAA;AAAA,UACsBxD,SADtB,GAAA,YAAA,CAAA,SAAA;AAGP,UAAMyD,gBAAgB,GAAG,MAAM,CAAN,MAAA,CAAc;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAd,EAAA,KAAA,EAA6C;AACpE1B,QAAAA,KAAK,EAD+D,KAAA;AAEpEC,QAAAA,MAAM,EAF8D,MAAA;AAGpE0B,QAAAA,MAAM,EAAE3D,SAAS,CAAC,KAAD,KAAA;AAHmD,OAA7C,CAAzB;AAMA,aACE,KAAA,CAAA,aAAA,CAAC,UAAD,CAAA,QAAA,EAAA;AAAqB,QAAA,KAAK,EAAE,KAAK4D;AAAjC,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,GAAG,EAAR,cAAA;AAAwB,QAAA,GAAG,EAAE,KAA7B,eAAA;AAAmD,QAAA,KAAK,EAAEH;AAA1D,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,KAAA,EAAA;AAEE,QAAA,KAAK,EAFP,MAAA;AAGE,QAAA,MAAM,EAHR,MAAA;AAIE,QAAA,KAAK,EAJP,IAAA;AAKE,QAAA,QAAQ,EAAE,KALZ,SAAA;AAME,QAAA,MAAM,EAAE,KANV,OAAA;AAOE,QAAA,GAAG,EAAE,KAAKI;AAPZ,OAAA,CAAA,EASG,KAAA,KAAA,CAZT,QAGM,CADF,CADF,CADF;AAiBD;;;;EA5UyCnD,a;;gBAAvBD,c,eAKAlD,S;;gBALAkD,c,kBAMGJ,Y;;SANHI,c","sourcesContent":["// @flow\nimport * as React from 'react';\nimport {PureComponent, createRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport StaticMap from './static-map';\nimport {MAPBOX_LIMITS} from '../utils/map-state';\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nimport TransitionManager from '../utils/transition-manager';\nimport MapContext from './map-context';\n\nimport {EventManager} from 'mjolnir.js';\nimport MapController from '../utils/map-controller';\nimport deprecateWarn from '../utils/deprecate-warn';\n\nimport type {ViewState} from '../mapbox/mapbox';\nimport type {StaticMapProps} from './static-map';\nimport type {MjolnirEvent} from 'mjolnir.js';\nimport type {MapContextProps} from './map-context';\n\nconst propTypes = Object.assign({}, StaticMap.propTypes, {\n  // Additional props on top of StaticMap\n\n  /** Viewport constraints */\n  // Max zoom level\n  maxZoom: PropTypes.number,\n  // Min zoom level\n  minZoom: PropTypes.number,\n  // Max pitch in degrees\n  maxPitch: PropTypes.number,\n  // Min pitch in degrees\n  minPitch: PropTypes.number,\n\n  // Callbacks fired when the user interacted with the map. The object passed to the callbacks\n  // contains viewport properties such as `longitude`, `latitude`, `zoom` etc.\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func,\n  onInteractionStateChange: PropTypes.func,\n\n  /** Viewport transition **/\n  // transition duration for viewport change\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  // TransitionInterpolator instance, can be used to perform custom transitions.\n  transitionInterpolator: PropTypes.object,\n  // type of interruption of current transition on update.\n  transitionInterruption: PropTypes.number,\n  // easing function\n  transitionEasing: PropTypes.func,\n  // transition status update functions\n  onTransitionStart: PropTypes.func,\n  onTransitionInterrupt: PropTypes.func,\n  onTransitionEnd: PropTypes.func,\n\n  /** Enables control event handling */\n  // Scroll to zoom\n  scrollZoom: PropTypes.bool,\n  // Drag to pan\n  dragPan: PropTypes.bool,\n  // Drag to rotate\n  dragRotate: PropTypes.bool,\n  // Double click to zoom\n  doubleClickZoom: PropTypes.bool,\n  // Multitouch zoom\n  touchZoom: PropTypes.bool,\n  // Multitouch rotate\n  touchRotate: PropTypes.bool,\n  // Keyboard\n  keyboard: PropTypes.bool,\n\n  /** Event callbacks */\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onDblClick: PropTypes.func,\n  onContextMenu: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onTouchStart: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onWheel: PropTypes.func,\n\n  /** Custom touch-action CSS for the event canvas. Defaults to 'none' */\n  touchAction: PropTypes.string,\n\n  /** Radius to detect features around a clicked point. Defaults to 0. */\n  clickRadius: PropTypes.number,\n\n  /** List of layers that are interactive */\n  interactiveLayerIds: PropTypes.array,\n\n  /** Accessor that returns a cursor style to show interactive state */\n  getCursor: PropTypes.func,\n\n  // A map control instance to replace the default map controller\n  // The object must expose a method: `setOptions(opts)`\n  controller: PropTypes.instanceOf(MapController)\n});\n\ntype State = {\n  isLoaded: boolean,\n  isDragging: boolean,\n  isHovering: boolean\n};\n\nconst getDefaultCursor = ({isDragging, isHovering}: State) =>\n  isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab';\n\nconst defaultProps = Object.assign(\n  {},\n  StaticMap.defaultProps,\n  MAPBOX_LIMITS,\n  TransitionManager.defaultProps,\n  {\n    onViewStateChange: null,\n    onViewportChange: null,\n    onClick: null,\n    onNativeClick: null,\n    onHover: null,\n    onContextMenu: (event: MouseEvent) => event.preventDefault(),\n\n    scrollZoom: true,\n    dragPan: true,\n    dragRotate: true,\n    doubleClickZoom: true,\n    touchZoom: true,\n    touchRotate: false,\n    keyboard: true,\n\n    touchAction: 'none',\n    clickRadius: 0,\n    getCursor: getDefaultCursor\n  }\n);\n\ntype InteractionState = {\n  isDragging: boolean\n};\n\ntype MapEvent = MjolnirEvent & {\n  point: Array<number>,\n  lngLat: Array<number>,\n  features: ?Array<any>\n};\n\nexport type InteractiveMapProps = StaticMapProps & {\n  onViewStateChange: Function,\n  onViewportChange: Function,\n  onInteractionStateChange: Function,\n  onHover: Function,\n  onClick: Function,\n  onNativeClick: Function,\n  onDblClick: Function,\n  onContextMenu: Function,\n  onMouseDown: Function,\n  onMouseMove: Function,\n  onMouseUp: Function,\n  onTouchStart: Function,\n  onTouchMove: Function,\n  onTouchEnd: Function,\n  onMouseEnter: Function,\n  onMouseLeave: Function,\n  onMouseOut: Function,\n  onWheel: Function,\n\n  transitionDuration: number,\n  transitionInterpolator: any,\n  transitionInterruption: number,\n  transitionEasing: Function,\n\n  scrollZoom: boolean,\n  dragPan: boolean,\n  dragRotate: boolean,\n  doubleClickZoom: boolean,\n  touchZoom: boolean,\n  touchRotate: boolean,\n  keyboard: boolean,\n\n  touchAction: string,\n  clickRadius: number,\n  interactiveLayerIds: Array<string>,\n  getCursor: Function,\n  controller: MapController\n};\n\nexport default class InteractiveMap extends PureComponent<InteractiveMapProps, State> {\n  static supported() {\n    return StaticMap.supported();\n  }\n\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  constructor(props: InteractiveMapProps) {\n    super(props);\n    // Check for deprecated props\n    deprecateWarn(props);\n\n    // If props.controller is not provided, fallback to default MapController instance\n    // Cannot use defaultProps here because it needs to be per map instance\n    this._controller = props.controller || new MapController();\n\n    this._eventManager = new EventManager(null, {\n      touchAction: props.touchAction\n    });\n\n    this._updateInteractiveContext({\n      isDragging: false,\n      eventManager: this._eventManager\n    });\n  }\n\n  state: State = {\n    // Whether mapbox styles have finished loading\n    isLoaded: false,\n    // Whether the cursor is down\n    isDragging: false,\n    // Whether the cursor is over a clickable feature\n    isHovering: false\n  };\n\n  componentDidMount() {\n    const eventManager = this._eventManager;\n\n    const mapContainer = this._eventCanvasRef.current;\n    eventManager.setElement(mapContainer);\n    // Register additional event handlers for click and hover\n    eventManager.on({\n      pointerdown: this._onPointerDown,\n      pointermove: this._onPointerMove,\n      pointerup: this._onPointerUp,\n      pointerleave: this._onEvent.bind(this, 'onMouseOut'),\n      click: this._onClick,\n      anyclick: this._onClick,\n      dblclick: this._onEvent.bind(this, 'onDblClick'),\n      wheel: this._onEvent.bind(this, 'onWheel'),\n      contextmenu: this._onEvent.bind(this, 'onContextMenu')\n    });\n\n    this._setControllerProps(this.props);\n\n    this._updateInteractiveContext({mapContainer});\n  }\n\n  componentDidUpdate() {\n    this._setControllerProps(this.props);\n  }\n\n  componentWillUnmount() {\n    this._eventManager.destroy();\n  }\n\n  _controller: MapController;\n  _eventManager: any;\n  _interactiveContext: MapContextProps;\n  _width: number = 0;\n  _height: number = 0;\n  _eventCanvasRef: {current: null | HTMLDivElement} = createRef();\n  _staticMapRef: {current: null | StaticMap} = createRef();\n\n  getMap = () => {\n    return this._staticMapRef.current ? this._staticMapRef.current.getMap() : null;\n  };\n\n  queryRenderedFeatures = (geometry: any, options: any = {}) => {\n    const map = this.getMap();\n    return map && map.queryRenderedFeatures(geometry, options);\n  };\n\n  _setControllerProps(props: InteractiveMapProps) {\n    props = Object.assign({}, props, props.viewState, {\n      isInteractive: Boolean(props.onViewStateChange || props.onViewportChange),\n      onViewportChange: this._onViewportChange,\n      onStateChange: this._onInteractionStateChange,\n      eventManager: this._eventManager,\n      width: this._width,\n      height: this._height\n    });\n\n    this._controller.setOptions(props);\n\n    // Pass callbacks via MapContext\n    // Do not create a new context object because these do not affect render\n    const context = this._interactiveContext;\n    context.onViewportChange = props.onViewportChange;\n    context.onViewStateChange = props.onViewStateChange;\n  }\n\n  _getFeatures({pos, radius}: {pos: Array<number>, radius: number}) {\n    let features;\n    const queryParams = {};\n    const map = this.getMap();\n\n    if (this.props.interactiveLayerIds) {\n      queryParams.layers = this.props.interactiveLayerIds;\n    }\n\n    if (radius) {\n      // Radius enables point features, like marker symbols, to be clicked.\n      const size = radius;\n      const bbox = [[pos[0] - size, pos[1] + size], [pos[0] + size, pos[1] - size]];\n      features = map && map.queryRenderedFeatures(bbox, queryParams);\n    } else {\n      features = map && map.queryRenderedFeatures(pos, queryParams);\n    }\n    return features;\n  }\n\n  _onInteractionStateChange = (interactionState: InteractionState) => {\n    const {isDragging = false} = interactionState;\n    if (isDragging !== this.state.isDragging) {\n      this._updateInteractiveContext({isDragging});\n      this.setState({isDragging});\n    }\n\n    const {onInteractionStateChange} = this.props;\n    if (onInteractionStateChange) {\n      onInteractionStateChange(interactionState);\n    }\n  };\n\n  _updateInteractiveContext(updatedContext: $Shape<MapContextProps>) {\n    this._interactiveContext = Object.assign({}, this._interactiveContext, updatedContext);\n  }\n\n  _onResize = ({width, height}: {width: number, height: number}) => {\n    this._width = width;\n    this._height = height;\n    this._setControllerProps(this.props);\n    this.props.onResize({width, height});\n  };\n\n  _onViewportChange = (\n    viewState: ViewState,\n    interactionState: InteractionState,\n    oldViewState: ViewState\n  ) => {\n    const {onViewStateChange, onViewportChange} = this.props;\n\n    if (onViewStateChange) {\n      onViewStateChange({viewState, interactionState, oldViewState});\n    }\n    if (onViewportChange) {\n      onViewportChange(viewState, interactionState, oldViewState);\n    }\n  };\n\n  /* Generic event handling */\n  _normalizeEvent(event: MapEvent) {\n    if (event.lngLat) {\n      // Already unprojected\n      return event;\n    }\n\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    const pos = [x, y];\n\n    const viewport = new WebMercatorViewport(\n      // $FlowFixMe\n      Object.assign({}, this.props, {\n        width: this._width,\n        height: this._height\n      })\n    );\n\n    event.point = pos;\n    event.lngLat = viewport.unproject(pos);\n\n    return event;\n  }\n\n  _onLoad = (event: MapEvent) => {\n    this.setState({isLoaded: true});\n    this.props.onLoad(event);\n  };\n\n  _onEvent = (callbackName: string, event: MapEvent) => {\n    const func = this.props[callbackName];\n    if (func) {\n      func(this._normalizeEvent(event));\n    }\n  };\n\n  /* Special case event handling */\n  _onPointerDown = (event: MapEvent) => {\n    switch (event.pointerType) {\n      case 'touch':\n        this._onEvent('onTouchStart', event);\n        break;\n\n      default:\n        this._onEvent('onMouseDown', event);\n    }\n  };\n\n  _onPointerUp = (event: MapEvent) => {\n    switch (event.pointerType) {\n      case 'touch':\n        this._onEvent('onTouchEnd', event);\n        break;\n\n      default:\n        this._onEvent('onMouseUp', event);\n    }\n  };\n\n  // eslint-disable-next-line complexity\n  _onPointerMove = (event: MapEvent) => {\n    switch (event.pointerType) {\n      case 'touch':\n        this._onEvent('onTouchMove', event);\n        break;\n\n      default:\n        this._onEvent('onMouseMove', event);\n    }\n\n    if (!this.state.isDragging) {\n      const {onHover, interactiveLayerIds} = this.props;\n      let features;\n      event = this._normalizeEvent(event);\n      if (this.state.isLoaded && (interactiveLayerIds || onHover)) {\n        features = this._getFeatures({\n          pos: event.point,\n          radius: this.props.clickRadius\n        });\n      }\n      if (onHover) {\n        // backward compatibility: v3 `onHover` interface\n        event.features = features;\n        onHover(event);\n      }\n\n      const isHovering = Boolean(interactiveLayerIds && features && features.length > 0);\n      const isEntering = isHovering && !this.state.isHovering;\n      const isExiting = !isHovering && this.state.isHovering;\n\n      if (isEntering) {\n        this._onEvent('onMouseEnter', event);\n      }\n      if (isExiting) {\n        this._onEvent('onMouseLeave', event);\n      }\n      if (isEntering || isExiting) {\n        this.setState({isHovering});\n      }\n    }\n  };\n\n  _onClick = (event: MapEvent) => {\n    const {onClick, onNativeClick, onDblClick, doubleClickZoom} = this.props;\n    let callbacks = [];\n    const isDoubleClickEnabled = onDblClick || doubleClickZoom;\n\n    // `click` is only fired on single click. `anyclick` is fired twice if double clicking.\n    // `click` has a delay period after pointer up that prevents it from firing when\n    // double clicking. `anyclick` is always fired immediately after pointer up.\n    // If double click is turned off by the user, we want to immediately fire the\n    // onClick event. Otherwise, we wait to make sure it's a single click.\n    switch (event.type) {\n      case 'anyclick':\n        callbacks.push(onNativeClick);\n        if (!isDoubleClickEnabled) {\n          callbacks.push(onClick);\n        }\n        break;\n\n      case 'click':\n        if (isDoubleClickEnabled) {\n          callbacks.push(onClick);\n        }\n        break;\n\n      default:\n    }\n\n    callbacks = callbacks.filter(Boolean);\n\n    if (callbacks.length) {\n      event = this._normalizeEvent(event);\n      // backward compatibility: v3 `onClick` interface\n      event.features = this._getFeatures({\n        pos: event.point,\n        radius: this.props.clickRadius\n      });\n      callbacks.forEach(cb => cb(event));\n    }\n  };\n\n  render() {\n    const {width, height, style, getCursor} = this.props;\n\n    const eventCanvasStyle = Object.assign({position: 'relative'}, style, {\n      width,\n      height,\n      cursor: getCursor(this.state)\n    });\n\n    return (\n      <MapContext.Provider value={this._interactiveContext}>\n        <div key=\"event-canvas\" ref={this._eventCanvasRef} style={eventCanvasStyle}>\n          <StaticMap\n            {...this.props}\n            width=\"100%\"\n            height=\"100%\"\n            style={null}\n            onResize={this._onResize}\n            onLoad={this._onLoad}\n            ref={this._staticMapRef}\n          >\n            {this.props.children}\n          </StaticMap>\n        </div>\n      </MapContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}