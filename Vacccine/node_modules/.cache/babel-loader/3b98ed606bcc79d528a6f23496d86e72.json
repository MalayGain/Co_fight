{"ast":null,"code":"import WebMercatorViewport from './web-mercator-viewport';\nimport { mod } from './math-utils';\nvar MAX_LATITUDE = 85.05113;\nvar MIN_LATITUDE = -85.05113;\nexport default function normalizeViewportProps(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      longitude = _ref.longitude,\n      latitude = _ref.latitude,\n      zoom = _ref.zoom,\n      _ref$pitch = _ref.pitch,\n      pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n      _ref$bearing = _ref.bearing,\n      bearing = _ref$bearing === void 0 ? 0 : _ref$bearing;\n\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  var flatViewport = new WebMercatorViewport({\n    width: width,\n    height: height,\n    longitude: longitude,\n    latitude: latitude,\n    zoom: zoom\n  });\n  var topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n  var bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  var shiftY = 0;\n\n  if (bottomY - topY < height) {\n    zoom += Math.log2(height / (bottomY - topY));\n    flatViewport = new WebMercatorViewport({\n      width: width,\n      height: height,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom\n    });\n    topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n    bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  }\n\n  if (topY > 0) {\n    shiftY = topY;\n  } else if (bottomY < height) {\n    shiftY = bottomY - height;\n  }\n\n  if (shiftY) {\n    latitude = flatViewport.unproject([width / 2, height / 2 + shiftY])[1];\n  }\n\n  return {\n    width: width,\n    height: height,\n    longitude: longitude,\n    latitude: latitude,\n    zoom: zoom,\n    pitch: pitch,\n    bearing: bearing\n  };\n}","map":{"version":3,"sources":["../../src/normalize-viewport-props.js"],"names":["MAX_LATITUDE","MIN_LATITUDE","width","height","longitude","latitude","zoom","pitch","bearing","mod","flatViewport","topY","bottomY","shiftY","Math"],"mappings":"AAAA,OAAA,mBAAA,MAAA,yBAAA;AACA,SAAA,GAAA,QAAA,cAAA;AAGA,IAAMA,YAAY,GAAlB,QAAA;AACA,IAAMC,YAAY,GAAG,CAArB,QAAA;AAIA,eAAe,SAAA,sBAAA,CAAA,IAAA,EAQZ;AAAA,MAPDC,KAOC,GAAA,IAAA,CAPDA,KAOC;AAAA,MANDC,MAMC,GAAA,IAAA,CANDA,MAMC;AAAA,MALDC,SAKC,GAAA,IAAA,CALDA,SAKC;AAAA,MAJDC,QAIC,GAAA,IAAA,CAJDA,QAIC;AAAA,MAHDC,IAGC,GAAA,IAAA,CAHDA,IAGC;AAAA,MAAA,UAAA,GAAA,IAAA,CAFDC,KAEC;AAAA,MAFDA,KAEC,GAAA,UAAA,KAAA,KAAA,CAAA,GAFO,CAEP,GAAA,UAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CADDC,OACC;AAAA,MADDA,OACC,GAAA,YAAA,KAAA,KAAA,CAAA,GADS,CACT,GAAA,YAAA;;AAED,MAAIJ,SAAS,GAAG,CAAZA,GAAAA,IAAoBA,SAAS,GAAjC,GAAA,EAAyC;AACvCA,IAAAA,SAAS,GAAGK,GAAG,CAACL,SAAS,GAAV,GAAA,EAAHK,GAAG,CAAHA,GAAZL,GAAAA;AACD;;AACD,MAAII,OAAO,GAAG,CAAVA,GAAAA,IAAkBA,OAAO,GAA7B,GAAA,EAAqC;AACnCA,IAAAA,OAAO,GAAGC,GAAG,CAACD,OAAO,GAAR,GAAA,EAAHC,GAAG,CAAHA,GAAVD,GAAAA;AACD;;AAGD,MAAIE,YAAY,GAAG,IAAA,mBAAA,CAAwB;AAACR,IAAAA,KAAK,EAAN,KAAA;AAAQC,IAAAA,MAAM,EAAd,MAAA;AAAgBC,IAAAA,SAAS,EAAzB,SAAA;AAA2BC,IAAAA,QAAQ,EAAnC,QAAA;AAAqCC,IAAAA,IAAI,EAAJA;AAArC,GAAxB,CAAnB;AACA,MAAIK,IAAI,GAAGD,YAAY,CAAZA,OAAAA,CAAqB,CAAA,SAAA,EAArBA,YAAqB,CAArBA,EAAX,CAAWA,CAAX;AACA,MAAIE,OAAO,GAAGF,YAAY,CAAZA,OAAAA,CAAqB,CAAA,SAAA,EAArBA,YAAqB,CAArBA,EAAd,CAAcA,CAAd;AACA,MAAIG,MAAM,GAAV,CAAA;;AAEA,MAAID,OAAO,GAAPA,IAAAA,GAAJ,MAAA,EAA6B;AAG3BN,IAAAA,IAAI,IAAIQ,IAAI,CAAJA,IAAAA,CAAUX,MAAM,IAAIS,OAAO,GAAnCN,IAAwB,CAAhBQ,CAARR;AAGAI,IAAAA,YAAY,GAAG,IAAA,mBAAA,CAAwB;AAACR,MAAAA,KAAK,EAAN,KAAA;AAAQC,MAAAA,MAAM,EAAd,MAAA;AAAgBC,MAAAA,SAAS,EAAzB,SAAA;AAA2BC,MAAAA,QAAQ,EAAnC,QAAA;AAAqCC,MAAAA,IAAI,EAAJA;AAArC,KAAxB,CAAfI;AACAC,IAAAA,IAAI,GAAGD,YAAY,CAAZA,OAAAA,CAAqB,CAAA,SAAA,EAArBA,YAAqB,CAArBA,EAAPC,CAAOD,CAAPC;AACAC,IAAAA,OAAO,GAAGF,YAAY,CAAZA,OAAAA,CAAqB,CAAA,SAAA,EAArBA,YAAqB,CAArBA,EAAVE,CAAUF,CAAVE;AACD;;AACD,MAAID,IAAI,GAAR,CAAA,EAAc;AAEZE,IAAAA,MAAM,GAANA,IAAAA;AAFF,GAAA,MAGO,IAAID,OAAO,GAAX,MAAA,EAAsB;AAE3BC,IAAAA,MAAM,GAAGD,OAAO,GAAhBC,MAAAA;AACD;;AACD,MAAA,MAAA,EAAY;AACVR,IAAAA,QAAQ,GAAGK,YAAY,CAAZA,SAAAA,CAAuB,CAACR,KAAK,GAAN,CAAA,EAAYC,MAAM,GAANA,CAAAA,GAAnCO,MAAuB,CAAvBA,EAAXL,CAAWK,CAAXL;AACD;;AAED,SAAO;AAACH,IAAAA,KAAK,EAAN,KAAA;AAAQC,IAAAA,MAAM,EAAd,MAAA;AAAgBC,IAAAA,SAAS,EAAzB,SAAA;AAA2BC,IAAAA,QAAQ,EAAnC,QAAA;AAAqCC,IAAAA,IAAI,EAAzC,IAAA;AAA2CC,IAAAA,KAAK,EAAhD,KAAA;AAAkDC,IAAAA,OAAO,EAAPA;AAAlD,GAAP;AACD","sourcesContent":["import WebMercatorViewport from './web-mercator-viewport';\nimport {mod} from './math-utils';\n\n// defined by mapbox-gl\nconst MAX_LATITUDE = 85.05113;\nconst MIN_LATITUDE = -85.05113;\n\n// Apply mathematical constraints to viewport props\n// eslint-disable-next-line complexity\nexport default function normalizeViewportProps({\n  width,\n  height,\n  longitude,\n  latitude,\n  zoom,\n  pitch = 0,\n  bearing = 0\n}) {\n  // Normalize degrees\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  // Constrain zoom and shift center at low zoom levels\n  let flatViewport = new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  let topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n  let bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  let shiftY = 0;\n\n  if (bottomY - topY < height) {\n    // Map height must not be smaller than viewport height\n    // Zoom out map to fit map height into viewport\n    zoom += Math.log2(height / (bottomY - topY));\n\n    // Calculate top and bottom using new zoom\n    flatViewport = new WebMercatorViewport({width, height, longitude, latitude, zoom});\n    topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n    bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  }\n  if (topY > 0) {\n    // Compensate for white gap on top\n    shiftY = topY;\n  } else if (bottomY < height) {\n    // Compensate for white gap on bottom\n    shiftY = bottomY - height;\n  }\n  if (shiftY) {\n    latitude = flatViewport.unproject([width / 2, height / 2 + shiftY])[1];\n  }\n\n  return {width, height, longitude, latitude, zoom, pitch, bearing};\n}\n"]},"metadata":{},"sourceType":"module"}