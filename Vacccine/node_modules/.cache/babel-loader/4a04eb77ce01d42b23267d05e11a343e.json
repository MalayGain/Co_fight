{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { document } from '../utils/globals';\nimport PropTypes from 'prop-types';\nimport BaseControl from './base-control';\nimport * as React from 'react';\nimport mapboxgl from '../utils/mapboxgl';\nvar propTypes = Object.assign({}, BaseControl.propTypes, {\n  className: PropTypes.string,\n  container: PropTypes.object,\n  label: PropTypes.string\n});\nvar defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nvar FullscreenControl = function (_BaseControl) {\n  _inherits(FullscreenControl, _BaseControl);\n\n  var _super = _createSuper(FullscreenControl);\n\n  function FullscreenControl() {\n    var _this;\n\n    _classCallCheck(this, FullscreenControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isFullscreen: false,\n      showButton: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_mapboxFullscreenControl\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFullscreenChange\", function () {\n      var nextState = !_this._mapboxFullscreenControl._fullscreen;\n      _this._mapboxFullscreenControl._fullscreen = nextState;\n\n      _this.setState({\n        isFullscreen: nextState\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onClickFullscreen\", function () {\n      _this._mapboxFullscreenControl._onClickFullscreen();\n    });\n\n    return _this;\n  }\n\n  _createClass(FullscreenControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var container = this.props.container || this._context.mapContainer;\n      this._mapboxFullscreenControl = new mapboxgl.FullscreenControl({\n        container: container\n      });\n      this.setState({\n        showButton: this._mapboxFullscreenControl._checkFullscreenSupport()\n      });\n      document.addEventListener(this._mapboxFullscreenControl._fullscreenchange, this._onFullscreenChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(this._mapboxFullscreenControl._fullscreenchange, this._onFullscreenChange);\n    }\n  }, {\n    key: \"_renderButton\",\n    value: function _renderButton(type, label, callback) {\n      return React.createElement(\"button\", {\n        key: type,\n        className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n        type: \"button\",\n        title: label,\n        onClick: callback\n      }, React.createElement(\"span\", {\n        className: \"mapboxgl-ctrl-icon\",\n        \"aria-hidden\": \"true\"\n      }));\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      if (!this.state.showButton) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          label = _this$props.label;\n      var isFullscreen = this.state.isFullscreen;\n      var type = isFullscreen ? 'shrink' : 'fullscreen';\n      return React.createElement(\"div\", {\n        className: \"mapboxgl-ctrl mapboxgl-ctrl-group \".concat(className),\n        ref: this._containerRef\n      }, this._renderButton(type, label, this._onClickFullscreen));\n    }\n  }]);\n\n  return FullscreenControl;\n}(BaseControl);\n\n_defineProperty(FullscreenControl, \"propTypes\", propTypes);\n\n_defineProperty(FullscreenControl, \"defaultProps\", defaultProps);\n\nexport { FullscreenControl as default };","map":{"version":3,"sources":["../../../src/components/fullscreen-control.js"],"names":["propTypes","BaseControl","className","PropTypes","container","label","string","defaultProps","FullscreenControl","isFullscreen","showButton","mapboxgl","document","nextState","type","callback","_containerRef"],"mappings":"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","sourcesContent":["// @flow\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport PropTypes from 'prop-types';\nimport BaseControl from './base-control';\nimport * as React from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport type {BaseControlProps} from './base-control';\n\nconst propTypes = Object.assign({}, BaseControl.propTypes, {\n  // Custom className\n  className: PropTypes.string,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object,\n  label: PropTypes.string\n});\n\nconst defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nexport type FullscreenControlProps = BaseControlProps & {\n  className: string,\n  container: ?HTMLElement,\n  label: string\n};\n\ntype State = {\n  isFullscreen: boolean,\n  showButton: boolean\n};\n\nexport default class FullscreenControl extends BaseControl<\n  FullscreenControlProps,\n  State,\n  HTMLDivElement\n> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  state = {\n    isFullscreen: false,\n    showButton: false\n  };\n\n  _mapboxFullscreenControl: any = null;\n\n  componentDidMount() {\n    const container = this.props.container || this._context.mapContainer;\n\n    this._mapboxFullscreenControl = new mapboxgl.FullscreenControl({\n      container\n    });\n\n    // eslint-disable-next-line\n    this.setState({\n      showButton: this._mapboxFullscreenControl._checkFullscreenSupport()\n    });\n\n    document.addEventListener(\n      this._mapboxFullscreenControl._fullscreenchange,\n      this._onFullscreenChange\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      this._mapboxFullscreenControl._fullscreenchange,\n      this._onFullscreenChange\n    );\n  }\n\n  _onFullscreenChange = () => {\n    const nextState = !this._mapboxFullscreenControl._fullscreen;\n    // this is a hack\n    // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n    this._mapboxFullscreenControl._fullscreen = nextState;\n    this.setState({isFullscreen: nextState});\n  };\n\n  _onClickFullscreen = () => {\n    this._mapboxFullscreenControl._onClickFullscreen();\n  };\n\n  _renderButton(type: string, label: string, callback: Function) {\n    return (\n      <button\n        key={type}\n        className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n        type=\"button\"\n        title={label}\n        onClick={callback}\n      >\n        <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n      </button>\n    );\n  }\n\n  _render() {\n    if (!this.state.showButton) {\n      return null;\n    }\n\n    const {className, label} = this.props;\n    const {isFullscreen} = this.state;\n\n    const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n    return (\n      <div className={`mapboxgl-ctrl mapboxgl-ctrl-group ${className}`} ref={this._containerRef}>\n        {this._renderButton(type, label, this._onClickFullscreen)}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}