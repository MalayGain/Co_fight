{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport MapState from './map-state';\nimport { LinearInterpolator } from './transition';\nimport TransitionManager, { TRANSITION_EVENTS } from './transition-manager';\nimport debounce from './debounce';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport var LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\nvar ZOOM_ACCEL = 0.01;\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend', 'pinchcancel'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nvar MapController = function () {\n  function MapController() {\n    var _this = this;\n\n    _classCallCheck(this, MapController);\n\n    _defineProperty(this, \"events\", []);\n\n    _defineProperty(this, \"mapState\", void 0);\n\n    _defineProperty(this, \"onViewportChange\", void 0);\n\n    _defineProperty(this, \"onStateChange\", void 0);\n\n    _defineProperty(this, \"mapStateProps\", void 0);\n\n    _defineProperty(this, \"eventManager\", void 0);\n\n    _defineProperty(this, \"scrollZoom\", true);\n\n    _defineProperty(this, \"dragPan\", true);\n\n    _defineProperty(this, \"dragRotate\", true);\n\n    _defineProperty(this, \"doubleClickZoom\", true);\n\n    _defineProperty(this, \"touchZoom\", true);\n\n    _defineProperty(this, \"touchRotate\", false);\n\n    _defineProperty(this, \"keyboard\", true);\n\n    _defineProperty(this, \"_state\", {\n      isDragging: false\n    });\n\n    _defineProperty(this, \"_events\", {});\n\n    _defineProperty(this, \"_transitionManager\", new TransitionManager());\n\n    _defineProperty(this, \"setState\", function (newState) {\n      Object.assign(_this._state, newState);\n\n      if (_this.onStateChange) {\n        _this.onStateChange(_this._state);\n      }\n    });\n\n    this.handleEvent = this.handleEvent.bind(this);\n    this._onWheelEnd = debounce(this._onWheelEnd, 100);\n  }\n\n  _createClass(MapController, [{\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this.mapState = this.getMapState();\n\n      switch (event.type) {\n        case 'panstart':\n          return this._onPanStart(event);\n\n        case 'panmove':\n          return this._onPan(event);\n\n        case 'panend':\n          return this._onPanEnd(event);\n\n        case 'pinchstart':\n          return this._onPinchStart(event);\n\n        case 'pinchmove':\n          return this._onPinch(event);\n\n        case 'pinchcancel':\n        case 'pinchend':\n          return this._onPinchEnd(event);\n\n        case 'doubletap':\n          return this._onDoubleTap(event);\n\n        case 'wheel':\n          return this._onWheel(event);\n\n        case 'keydown':\n          return this._onKeyDown(event);\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _event$offsetCenter = event.offsetCenter,\n          x = _event$offsetCenter.x,\n          y = _event$offsetCenter.y;\n      return [x, y];\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newMapState) {\n      var extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var extraState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var oldViewport = this.mapState ? this.mapState.getViewportProps() : {};\n      var newViewport = Object.assign({}, newMapState.getViewportProps(), extraProps);\n      var viewStateChanged = Object.keys(newViewport).some(function (key) {\n        return oldViewport[key] !== newViewport[key];\n      });\n\n      if (viewStateChanged) {\n        this.onViewportChange(newViewport, extraState, oldViewport);\n      }\n\n      this.setState(Object.assign({}, newMapState.getInteractiveState(), extraState));\n    }\n  }, {\n    key: \"getMapState\",\n    value: function getMapState(overrides) {\n      return new MapState(Object.assign({}, this.mapStateProps, this._state, overrides));\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var onViewportChange = options.onViewportChange,\n          onStateChange = options.onStateChange,\n          _options$eventManager = options.eventManager,\n          eventManager = _options$eventManager === void 0 ? this.eventManager : _options$eventManager,\n          _options$isInteractiv = options.isInteractive,\n          isInteractive = _options$isInteractiv === void 0 ? true : _options$isInteractiv,\n          _options$scrollZoom = options.scrollZoom,\n          scrollZoom = _options$scrollZoom === void 0 ? this.scrollZoom : _options$scrollZoom,\n          _options$dragPan = options.dragPan,\n          dragPan = _options$dragPan === void 0 ? this.dragPan : _options$dragPan,\n          _options$dragRotate = options.dragRotate,\n          dragRotate = _options$dragRotate === void 0 ? this.dragRotate : _options$dragRotate,\n          _options$doubleClickZ = options.doubleClickZoom,\n          doubleClickZoom = _options$doubleClickZ === void 0 ? this.doubleClickZoom : _options$doubleClickZ,\n          _options$touchZoom = options.touchZoom,\n          touchZoom = _options$touchZoom === void 0 ? this.touchZoom : _options$touchZoom,\n          _options$touchRotate = options.touchRotate,\n          touchRotate = _options$touchRotate === void 0 ? this.touchRotate : _options$touchRotate,\n          _options$keyboard = options.keyboard,\n          keyboard = _options$keyboard === void 0 ? this.keyboard : _options$keyboard;\n      this.onViewportChange = onViewportChange;\n      this.onStateChange = onStateChange;\n      var dimensionChanged = !this.mapStateProps || this.mapStateProps.height !== options.height;\n      this.mapStateProps = options;\n\n      if (dimensionChanged) {\n        this.updateViewport(new MapState(options));\n      }\n\n      this._transitionManager.processViewportChange(Object.assign({}, options, {\n        onStateChange: this.setState\n      }));\n\n      if (this.eventManager !== eventManager) {\n        this.eventManager = eventManager;\n        this._events = {};\n        this.toggleEvents(this.events, true);\n      }\n\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this2 = this;\n\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this2._events[eventName] !== enabled) {\n            _this2._events[eventName] = enabled;\n\n            if (enabled) {\n              _this2.eventManager.on(eventName, _this2.handleEvent);\n            } else {\n              _this2.eventManager.off(eventName, _this2.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.panStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      return this.isFunctionKeyPressed(event) || event.rightButton ? this._onPanRotate(event) : this._onPanMove(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      var newMapState = this.mapState.panEnd().rotateEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.pan({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n\n      var deltaX = event.deltaX,\n          deltaY = event.deltaY;\n\n      var _this$getCenter = this.getCenter(event),\n          _this$getCenter2 = _slicedToArray(_this$getCenter, 2),\n          centerY = _this$getCenter2[1];\n\n      var startY = centerY - deltaY;\n\n      var _this$mapState$getVie = this.mapState.getViewportProps(),\n          width = _this$mapState$getVie.width,\n          height = _this$mapState$getVie.height;\n\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      var newMapState = this.mapState.rotate({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n\n      event.preventDefault();\n      var pos = this.getCenter(event);\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isZooming: true\n      });\n\n      this._onWheelEnd();\n\n      return true;\n    }\n  }, {\n    key: \"_onWheelEnd\",\n    value: function _onWheelEnd() {\n      this.setState({\n        isZooming: false\n      });\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._state.startPinchRotation = event.rotation;\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n\n      var newMapState = this.mapState;\n\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newMapState = newMapState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        var startPinchRotation = this._state.startPinchRotation;\n        newMapState = newMapState.rotate({\n          deltaScaleX: -(rotation - startPinchRotation) / 180\n        });\n      }\n\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: this.touchRotate\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      var newMapState = this.mapState.zoomEnd().rotateEnd();\n      this._state.startPinchRotation = 0;\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newMapState, Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        })\n      }), {\n        isZooming: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n\n      var funcKey = this.isFunctionKeyPressed(event);\n      var mapStateProps = this.mapStateProps;\n      var newMapState;\n\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - 2\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - 1\n            });\n          }\n\n          break;\n\n        case 187:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + 2\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + 1\n            });\n          }\n\n          break;\n\n        case 37:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing - 15\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [100, 0],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 39:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing + 15\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [-100, 0],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 38:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch + 10\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, 100],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 40:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch - 10\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, -100],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        default:\n          return false;\n      }\n\n      return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n    }\n  }]);\n\n  return MapController;\n}();\n\nexport { MapController as default };","map":{"version":3,"sources":["../../../src/utils/map-controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","transitionInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","MapController","isDragging","debounce","event","x","y","srcEvent","Boolean","Object","newMapState","extraProps","extraState","oldViewport","newViewport","viewStateChanged","overrides","options","onViewportChange","onStateChange","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","dimensionChanged","setState","eventNames","enabled","pos","isPanning","isRotating","deltaX","deltaY","centerY","startY","width","height","deltaScaleX","deltaScaleY","Math","delta","scale","isZooming","rotation","startPinchRotation","isZoomOut","around","funcKey","mapStateProps","zoom","bearing","startPos","pitch"],"mappings":";;;;AAqBA,OAAA,QAAA,MAAA,aAAA;AACA,SAAA,kBAAA,QAAA,cAAA;AACA,OAAA,iBAAA,IAAA,iBAAA,QAAA,sBAAA;AACA,OAAA,QAAA,MAAA,YAAA;AAIA,IAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,kBAAkB,EAAE;AADM,CAA5B;AAGA,OAAO,IAAMC,uBAAuB,GAAG;AACrCD,EAAAA,kBAAkB,EADmB,GAAA;AAErCE,EAAAA,gBAAgB,EAAE,SAAA,gBAAA,CAAA,CAAA,EAAA;AAAA,WAAA,CAAA;AAFmB,GAAA;AAGrCC,EAAAA,sBAAsB,EAAE,IAHa,kBAGb,EAHa;AAIrCC,EAAAA,sBAAsB,EAAEC,iBAAiB,CAACC;AAJL,CAAhC;AAQP,IAAMC,qBAAqB,GAA3B,CAAA;AACA,IAAMC,WAAW,GAAjB,GAAA;AACA,IAAMC,UAAU,GAAhB,IAAA;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,CADW,OACX,CADW;AAElBC,EAAAA,GAAG,EAAE,CAAA,UAAA,EAAA,SAAA,EAFa,QAEb,CAFa;AAGlBC,EAAAA,KAAK,EAAE,CAAA,YAAA,EAAA,WAAA,EAAA,UAAA,EAHW,aAGX,CAHW;AAIlBC,EAAAA,UAAU,EAAE,CAJM,WAIN,CAJM;AAKlBC,EAAAA,QAAQ,EAAE,CAAA,SAAA;AALQ,CAApB;;IAYqBC,a;AAqBnB,WAAA,aAAA,GAAc;AAAA,QAAA,KAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EApBU,EAoBV,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAdQ,IAcR,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAbK,IAaL,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAZQ,IAYR,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAXa,IAWb,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAVO,IAUP,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EATS,KAST,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EARM,IAQN,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EANA;AACZC,MAAAA,UAAU,EAAE;AADA,KAMA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAHC,EAGD,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,EAF0B,IAAA,iBAAA,EAE1B,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAmDH,UAAA,QAAA,EAAmB;AAC5BO,MAAAA,MAAM,CAANA,MAAAA,CAAc,KAAI,CAAlBA,MAAAA,EAAAA,QAAAA;;AACA,UAAI,KAAI,CAAR,aAAA,EAAwB;AACtB,QAAA,KAAI,CAAJ,aAAA,CAAmB,KAAI,CAAvB,MAAA;AACD;AAvDW,KAAA,CAAA;;AACZ,SAAA,WAAA,GAA0B,KAAA,WAAA,CAAA,IAAA,CAA1B,IAA0B,CAA1B;AACA,SAAA,WAAA,GAA0BN,QAAQ,CAAC,KAAD,WAAA,EAAlC,GAAkC,CAAlC;AACD;;;;gCAMWC,K,EAAqB;AAC/B,WAAA,QAAA,GAAgB,KAAhB,WAAgB,EAAhB;;AAEA,cAAQA,KAAK,CAAb,IAAA;AACE,aAAA,UAAA;AACE,iBAAO,KAAA,WAAA,CAAP,KAAO,CAAP;;AACF,aAAA,SAAA;AACE,iBAAO,KAAA,MAAA,CAAP,KAAO,CAAP;;AACF,aAAA,QAAA;AACE,iBAAO,KAAA,SAAA,CAAP,KAAO,CAAP;;AACF,aAAA,YAAA;AACE,iBAAO,KAAA,aAAA,CAAP,KAAO,CAAP;;AACF,aAAA,WAAA;AACE,iBAAO,KAAA,QAAA,CAAP,KAAO,CAAP;;AACF,aAAA,aAAA;AACA,aAAA,UAAA;AACE,iBAAO,KAAA,WAAA,CAAP,KAAO,CAAP;;AACF,aAAA,WAAA;AACE,iBAAO,KAAA,YAAA,CAAP,KAAO,CAAP;;AACF,aAAA,OAAA;AACE,iBAAO,KAAA,QAAA,CAAP,KAAO,CAAP;;AACF,aAAA,SAAA;AACE,iBAAO,KAAA,UAAA,CAAP,KAAO,CAAP;;AACF;AACE,iBAAA,KAAA;AArBJ;AAuBD;;;8BAISA,K,EAAoC;AAAA,UAAA,mBAAA,GAGxCA,KAHwC,CAAA,YAAA;AAAA,UAE3BC,CAF2B,GAAA,mBAAA,CAAA,CAAA;AAAA,UAExBC,CAFwB,GAAA,mBAAA,CAAA,CAAA;AAI5C,aAAO,CAAA,CAAA,EAAP,CAAO,CAAP;AACD;;;yCAEoBF,K,EAA8B;AAAA,UAC1CG,QAD0C,GAC9BH,KAD8B,CAAA,QAAA;AAEjD,aAAOI,OAAO,CAACD,QAAQ,CAARA,OAAAA,IAAoBA,QAAQ,CAA5BA,MAAAA,IAAuCA,QAAQ,CAA/CA,OAAAA,IAA2DA,QAAQ,CAAlF,QAAc,CAAd;AACD;;;mCAWcG,W,EAAmE;AAAA,UAA5CC,UAA4C,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA1B,EAA0B;AAAA,UAAtBC,UAAsB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAEhF,UAAMC,WAAW,GAAG,KAAA,QAAA,GAAgB,KAAA,QAAA,CAAhB,gBAAgB,EAAhB,GAApB,EAAA;AACA,UAAMC,WAAW,GAAGL,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkBC,WAAW,CAA7BD,gBAAkBC,EAAlBD,EAApB,UAAoBA,CAApB;AAEA,UAAMM,gBAAgB,GAAG,MAAM,CAAN,IAAA,CAAA,WAAA,EAAA,IAAA,CACvB,UAAA,GAAA,EAAG;AAAA,eAAIF,WAAW,CAAXA,GAAW,CAAXA,KAAqBC,WAAW,CAApC,GAAoC,CAApC;AADL,OAAyB,CAAzB;;AAKA,UAAA,gBAAA,EAAsB;AACpB,aAAA,gBAAA,CAAA,WAAA,EAAA,UAAA,EAAA,WAAA;AACD;;AAED,WAAA,QAAA,CAAcL,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkBC,WAAW,CAA7BD,mBAAkBC,EAAlBD,EAAd,UAAcA,CAAd;AACD;;;gCAEWO,S,EAA2B;AACrC,aAAO,IAAA,QAAA,CAAaP,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAkB,KAAlBA,aAAAA,EAAsC,KAAtCA,MAAAA,EAApB,SAAoBA,CAAb,CAAP;AACD;;;+BAKUQ,O,EAAc;AAAA,UAErBC,gBAFqB,GAcnBD,OAdmB,CAAA,gBAAA;AAAA,UAGrBE,aAHqB,GAcnBF,OAdmB,CAAA,aAAA;AAAA,UAAA,qBAAA,GAcnBA,OAdmB,CAAA,YAAA;AAAA,UAIrBG,YAJqB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAIN,KAJM,YAAA,GAAA,qBAAA;AAAA,UAAA,qBAAA,GAcnBH,OAdmB,CAAA,aAAA;AAAA,UAMrBI,aANqB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,qBAAA;AAAA,UAAA,mBAAA,GAcnBJ,OAdmB,CAAA,UAAA;AAAA,UAOrBK,UAPqB,GAAA,mBAAA,KAAA,KAAA,CAAA,GAOR,KAPQ,UAAA,GAAA,mBAAA;AAAA,UAAA,gBAAA,GAcnBL,OAdmB,CAAA,OAAA;AAAA,UAQrBM,OARqB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAQX,KARW,OAAA,GAAA,gBAAA;AAAA,UAAA,mBAAA,GAcnBN,OAdmB,CAAA,UAAA;AAAA,UASrBO,UATqB,GAAA,mBAAA,KAAA,KAAA,CAAA,GASR,KATQ,UAAA,GAAA,mBAAA;AAAA,UAAA,qBAAA,GAcnBP,OAdmB,CAAA,eAAA;AAAA,UAUrBQ,eAVqB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAUH,KAVG,eAAA,GAAA,qBAAA;AAAA,UAAA,kBAAA,GAcnBR,OAdmB,CAAA,SAAA;AAAA,UAWrBS,SAXqB,GAAA,kBAAA,KAAA,KAAA,CAAA,GAWT,KAXS,SAAA,GAAA,kBAAA;AAAA,UAAA,oBAAA,GAcnBT,OAdmB,CAAA,WAAA;AAAA,UAYrBU,WAZqB,GAAA,oBAAA,KAAA,KAAA,CAAA,GAYP,KAZO,WAAA,GAAA,oBAAA;AAAA,UAAA,iBAAA,GAcnBV,OAdmB,CAAA,QAAA;AAAA,UAarBW,QAbqB,GAAA,iBAAA,KAAA,KAAA,CAAA,GAaV,KAbU,QAAA,GAAA,iBAAA;AAgBvB,WAAA,gBAAA,GAAA,gBAAA;AACA,WAAA,aAAA,GAAA,aAAA;AAEA,UAAMC,gBAAgB,GAAG,CAAC,KAAD,aAAA,IAAuB,KAAA,aAAA,CAAA,MAAA,KAA8BZ,OAAO,CAArF,MAAA;AAEA,WAAA,aAAA,GAAA,OAAA;;AAEA,UAAA,gBAAA,EAAsB;AAEpB,aAAA,cAAA,CAAoB,IAAA,QAAA,CAApB,OAAoB,CAApB;AACD;;AAED,WAAA,kBAAA,CAAA,qBAAA,CACE,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,OAAA,EAA2B;AACzBE,QAAAA,aAAa,EAAE,KAAKW;AADK,OAA3B,CADF;;AAMA,UAAI,KAAA,YAAA,KAAJ,YAAA,EAAwC;AAEtC,aAAA,YAAA,GAAA,YAAA;AACA,aAAA,OAAA,GAAA,EAAA;AACA,aAAA,YAAA,CAAkB,KAAlB,MAAA,EAAA,IAAA;AACD;;AAGD,WAAA,YAAA,CAAkBnC,WAAW,CAA7B,KAAA,EAAqC0B,aAAa,IAAlD,UAAA;AACA,WAAA,YAAA,CAAkB1B,WAAW,CAA7B,GAAA,EAAmC0B,aAAa,KAAKE,OAAO,IAA5D,UAAgD,CAAhD;AACA,WAAA,YAAA,CAAkB5B,WAAW,CAA7B,KAAA,EAAqC0B,aAAa,KAAKK,SAAS,IAAhE,WAAkD,CAAlD;AACA,WAAA,YAAA,CAAkB/B,WAAW,CAA7B,UAAA,EAA0C0B,aAAa,IAAvD,eAAA;AACA,WAAA,YAAA,CAAkB1B,WAAW,CAA7B,QAAA,EAAwC0B,aAAa,IAArD,QAAA;AAGA,WAAA,UAAA,GAAA,UAAA;AACA,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,UAAA,GAAA,UAAA;AACA,WAAA,eAAA,GAAA,eAAA;AACA,WAAA,SAAA,GAAA,SAAA;AACA,WAAA,WAAA,GAAA,WAAA;AACA,WAAA,QAAA,GAAA,QAAA;AACD;;;iCAEYU,U,EAA2BC,O,EAAkB;AAAA,UAAA,MAAA,GAAA,IAAA;;AACxD,UAAI,KAAJ,YAAA,EAAuB;AACrBD,QAAAA,UAAU,CAAVA,OAAAA,CAAmB,UAAA,SAAA,EAAa;AAC9B,cAAI,MAAI,CAAJ,OAAA,CAAA,SAAA,MAAJ,OAAA,EAAyC;AACvC,YAAA,MAAI,CAAJ,OAAA,CAAA,SAAA,IAAA,OAAA;;AACA,gBAAA,OAAA,EAAa;AACX,cAAA,MAAI,CAAJ,YAAA,CAAA,EAAA,CAAA,SAAA,EAAgC,MAAI,CAApC,WAAA;AADF,aAAA,MAEO;AACL,cAAA,MAAI,CAAJ,YAAA,CAAA,GAAA,CAAA,SAAA,EAAiC,MAAI,CAArC,WAAA;AACD;AACF;AARHA,SAAAA;AAUD;AACF;;;gCAIW3B,K,EAAqB;AAC/B,UAAM6B,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;AACA,UAAMvB,WAAW,GAAG,KAAA,QAAA,CAAA,QAAA,CAAuB;AAACuB,QAAAA,GAAG,EAAHA;AAAD,OAAvB,EAAA,WAAA,CAA0C;AAACA,QAAAA,GAAG,EAAHA;AAAD,OAA1C,CAApB;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,mBAAA,EAAsD;AAAC/B,QAAAA,UAAU,EAAE;AAAb,OAAtD;AACA,aAAA,IAAA;AACD;;;2BAGME,K,EAAqB;AAC1B,aAAO,KAAA,oBAAA,CAAA,KAAA,KAAoCA,KAAK,CAAzC,WAAA,GACH,KAAA,YAAA,CADG,KACH,CADG,GAEH,KAAA,UAAA,CAFJ,KAEI,CAFJ;AAGD;;;8BAGSA,K,EAAqB;AAC7B,UAAMM,WAAW,GAAG,KAAA,QAAA,CAAA,MAAA,GAApB,SAAoB,EAApB;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,IAAA,EAAuC;AACrCR,QAAAA,UAAU,EAD2B,KAAA;AAErCgC,QAAAA,SAAS,EAF4B,KAAA;AAGrCC,QAAAA,UAAU,EAAE;AAHyB,OAAvC;AAKA,aAAA,IAAA;AACD;;;+BAIU/B,K,EAAqB;AAC9B,UAAI,CAAC,KAAL,OAAA,EAAmB;AACjB,eAAA,KAAA;AACD;;AACD,UAAM6B,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;AACA,UAAMvB,WAAW,GAAG,KAAA,QAAA,CAAA,GAAA,CAAkB;AAACuB,QAAAA,GAAG,EAAHA;AAAD,OAAlB,CAApB;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,mBAAA,EAAsD;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAtD;AACA,aAAA,IAAA;AACD;;;iCAIY9B,K,EAAqB;AAChC,UAAI,CAAC,KAAL,UAAA,EAAsB;AACpB,eAAA,KAAA;AACD;;AAH+B,UAKzBgC,MALyB,GAKPhC,KALO,CAAA,MAAA;AAAA,UAKjBiC,MALiB,GAKPjC,KALO,CAAA,MAAA;;AAAA,UAAA,eAAA,GAMZ,KAAA,SAAA,CANY,KAMZ,CANY;AAAA,UAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,UAMvBkC,OANuB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAOhC,UAAMC,MAAM,GAAGD,OAAO,GAAtB,MAAA;;AAPgC,UAAA,qBAAA,GAQR,KAAA,QAAA,CARQ,gBAQR,EARQ;AAAA,UAQzBE,KARyB,GAAA,qBAAA,CAAA,KAAA;AAAA,UAQlBC,MARkB,GAAA,qBAAA,CAAA,MAAA;;AAUhC,UAAMC,WAAW,GAAGN,MAAM,GAA1B,KAAA;AACA,UAAIO,WAAW,GAAf,CAAA;;AAEA,UAAIN,MAAM,GAAV,CAAA,EAAgB;AACd,YAAIO,IAAI,CAAJA,GAAAA,CAASH,MAAM,GAAfG,MAAAA,IAAJ,qBAAA,EAAuD;AAErDD,UAAAA,WAAW,GAAIN,MAAM,IAAIE,MAAM,GAAjB,MAAO,CAANF,GAAfM,WAAAA;AACD;AAJH,OAAA,MAKO,IAAIN,MAAM,GAAV,CAAA,EAAgB;AACrB,YAAIE,MAAM,GAAV,qBAAA,EAAoC;AAElCI,UAAAA,WAAW,GAAG,IAAIL,OAAO,GAAzBK,MAAAA;AACD;AACF;;AACDA,MAAAA,WAAW,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYA,IAAI,CAAJA,GAAAA,CAAS,CAATA,CAAAA,EAA1BD,WAA0BC,CAAZA,CAAdD;AAEA,UAAMjC,WAAW,GAAG,KAAA,QAAA,CAAA,MAAA,CAAqB;AAACgC,QAAAA,WAAW,EAAZ,WAAA;AAAcC,QAAAA,WAAW,EAAXA;AAAd,OAArB,CAApB;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,mBAAA,EAAsD;AAACR,QAAAA,UAAU,EAAE;AAAb,OAAtD;AACA,aAAA,IAAA;AACD;;;6BAGQ/B,K,EAAqB;AAC5B,UAAI,CAAC,KAAL,UAAA,EAAsB;AACpB,eAAA,KAAA;AACD;;AAEDA,MAAAA,KAAK,CAALA,cAAAA;AAEA,UAAM6B,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;AAP4B,UAQrBY,KARqB,GAQZzC,KARY,CAAA,KAAA;AAW5B,UAAI0C,KAAK,GAAG,KAAK,IAAIF,IAAI,CAAJA,GAAAA,CAAS,CAACA,IAAI,CAAJA,GAAAA,CAASC,KAAK,GAA7C,UAA+BD,CAAVA,CAAT,CAAZ;;AACA,UAAIC,KAAK,GAALA,CAAAA,IAAaC,KAAK,KAAtB,CAAA,EAA8B;AAC5BA,QAAAA,KAAK,GAAG,IAARA,KAAAA;AACD;;AAED,UAAMpC,WAAW,GAAG,KAAA,QAAA,CAAA,IAAA,CAAmB;AAACuB,QAAAA,GAAG,EAAJ,GAAA;AAAMa,QAAAA,KAAK,EAALA;AAAN,OAAnB,CAApB;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,mBAAA,EAAsD;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAtD;;AAEA,WAAA,WAAA;;AACA,aAAA,IAAA;AACD;;;kCAEa;AACZ,WAAA,QAAA,CAAc;AAACA,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACD;;;kCAGa3C,K,EAAqB;AACjC,UAAM6B,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;AACA,UAAMvB,WAAW,GAAG,KAAA,QAAA,CAAA,SAAA,CAAwB;AAACuB,QAAAA,GAAG,EAAHA;AAAD,OAAxB,EAAA,WAAA,CAA2C;AAACA,QAAAA,GAAG,EAAHA;AAAD,OAA3C,CAApB;AAEA,WAAA,MAAA,CAAA,kBAAA,GAAiC7B,KAAK,CAAtC,QAAA;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,mBAAA,EAAsD;AAACF,QAAAA,UAAU,EAAE;AAAb,OAAtD;AACA,aAAA,IAAA;AACD;;;6BAGQE,K,EAAqB;AAC5B,UAAI,CAAC,KAAD,SAAA,IAAmB,CAAC,KAAxB,WAAA,EAA0C;AACxC,eAAA,KAAA;AACD;;AAED,UAAIM,WAAW,GAAG,KAAlB,QAAA;;AACA,UAAI,KAAJ,SAAA,EAAoB;AAAA,YACXoC,KADW,GACF1C,KADE,CAAA,KAAA;AAElB,YAAM6B,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;AACAvB,QAAAA,WAAW,GAAG,WAAW,CAAX,IAAA,CAAiB;AAACuB,UAAAA,GAAG,EAAJ,GAAA;AAAMa,UAAAA,KAAK,EAALA;AAAN,SAAjB,CAAdpC;AACD;;AACD,UAAI,KAAJ,WAAA,EAAsB;AAAA,YACbsC,QADa,GACD5C,KADC,CAAA,QAAA;AAAA,YAEb6C,kBAFa,GAES,KAFT,MAES,CAFT,kBAAA;AAGpBvC,QAAAA,WAAW,GAAG,WAAW,CAAX,MAAA,CAAmB;AAC/BgC,UAAAA,WAAW,EAAE,EAAEM,QAAQ,GAAV,kBAAA,IAAmC;AADjB,SAAnB,CAAdtC;AAGD;;AAED,WAAA,cAAA,CAAA,WAAA,EAAA,mBAAA,EAAsD;AACpDR,QAAAA,UAAU,EAD0C,IAAA;AAEpDgC,QAAAA,SAAS,EAAE,KAFyC,SAAA;AAGpDa,QAAAA,SAAS,EAAE,KAHyC,SAAA;AAIpDZ,QAAAA,UAAU,EAAE,KAAKR;AAJmC,OAAtD;AAMA,aAAA,IAAA;AACD;;;gCAGWvB,K,EAAqB;AAC/B,UAAMM,WAAW,GAAG,KAAA,QAAA,CAAA,OAAA,GAApB,SAAoB,EAApB;AACA,WAAA,MAAA,CAAA,kBAAA,GAAA,CAAA;AACA,WAAA,cAAA,CAAA,WAAA,EAAA,IAAA,EAAuC;AACrCR,QAAAA,UAAU,EAD2B,KAAA;AAErCgC,QAAAA,SAAS,EAF4B,KAAA;AAGrCa,QAAAA,SAAS,EAH4B,KAAA;AAIrCZ,QAAAA,UAAU,EAAE;AAJyB,OAAvC;AAMA,aAAA,IAAA;AACD;;;iCAGY/B,K,EAAqB;AAChC,UAAI,CAAC,KAAL,eAAA,EAA2B;AACzB,eAAA,KAAA;AACD;;AACD,UAAM6B,GAAG,GAAG,KAAA,SAAA,CAAZ,KAAY,CAAZ;AACA,UAAMiB,SAAS,GAAG,KAAA,oBAAA,CAAlB,KAAkB,CAAlB;AAEA,UAAMxC,WAAW,GAAG,KAAA,QAAA,CAAA,IAAA,CAAmB;AAACuB,QAAAA,GAAG,EAAJ,GAAA;AAAMa,QAAAA,KAAK,EAAEI,SAAS,GAAA,GAAA,GAAS;AAA/B,OAAnB,CAApB;AACA,WAAA,cAAA,CAAA,WAAA,EAEE,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,uBAAA,EAA2C;AACzC9D,QAAAA,sBAAsB,EAAE,IAAA,kBAAA,CAAuB;AAAC+D,UAAAA,MAAM,EAAElB;AAAT,SAAvB;AADiB,OAA3C,CAFF,EAKE;AAACc,QAAAA,SAAS,EAAE;AAAZ,OALF;AAOA,aAAA,IAAA;AACD;;;+BAIU3C,K,EAAqB;AAC9B,UAAI,CAAC,KAAL,QAAA,EAAoB;AAClB,eAAA,KAAA;AACD;;AACD,UAAMgD,OAAO,GAAG,KAAA,oBAAA,CAAhB,KAAgB,CAAhB;AAJ8B,UAKvBC,aALuB,GAAA,KAAA,aAAA;AAM9B,UAAA,WAAA;;AAEA,cAAQjD,KAAK,CAALA,QAAAA,CAAR,OAAA;AACE,aAAA,GAAA;AACE,cAAA,OAAA,EAAa;AACXM,YAAAA,WAAW,GAAG,KAAA,WAAA,CAAiB;AAAC4C,cAAAA,IAAI,EAAED,aAAa,CAAbA,IAAAA,GAAqB;AAA5B,aAAjB,CAAd3C;AADF,WAAA,MAEO;AACLA,YAAAA,WAAW,GAAG,KAAA,WAAA,CAAiB;AAAC4C,cAAAA,IAAI,EAAED,aAAa,CAAbA,IAAAA,GAAqB;AAA5B,aAAjB,CAAd3C;AACD;;AACD;;AACF,aAAA,GAAA;AACE,cAAA,OAAA,EAAa;AACXA,YAAAA,WAAW,GAAG,KAAA,WAAA,CAAiB;AAAC4C,cAAAA,IAAI,EAAED,aAAa,CAAbA,IAAAA,GAAqB;AAA5B,aAAjB,CAAd3C;AADF,WAAA,MAEO;AACLA,YAAAA,WAAW,GAAG,KAAA,WAAA,CAAiB;AAAC4C,cAAAA,IAAI,EAAED,aAAa,CAAbA,IAAAA,GAAqB;AAA5B,aAAjB,CAAd3C;AACD;;AACD;;AACF,aAAA,EAAA;AACE,cAAA,OAAA,EAAa;AACXA,YAAAA,WAAW,GAAG,KAAA,WAAA,CAAiB;AAC7B6C,cAAAA,OAAO,EAAEF,aAAa,CAAbA,OAAAA,GAAwB;AADJ,aAAjB,CAAd3C;AADF,WAAA,MAIO;AACLA,YAAAA,WAAW,GAAG,KAAA,QAAA,CAAA,GAAA,CAAkB;AAACuB,cAAAA,GAAG,EAAE,CAAA,GAAA,EAAN,CAAM,CAAN;AAAgBuB,cAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA;AAA1B,aAAlB,CAAd9C;AACD;;AACD;;AACF,aAAA,EAAA;AACE,cAAA,OAAA,EAAa;AACXA,YAAAA,WAAW,GAAG,KAAA,WAAA,CAAiB;AAC7B6C,cAAAA,OAAO,EAAEF,aAAa,CAAbA,OAAAA,GAAwB;AADJ,aAAjB,CAAd3C;AADF,WAAA,MAIO;AACLA,YAAAA,WAAW,GAAG,KAAA,QAAA,CAAA,GAAA,CAAkB;AAACuB,cAAAA,GAAG,EAAE,CAAC,CAAD,GAAA,EAAN,CAAM,CAAN;AAAiBuB,cAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA;AAA3B,aAAlB,CAAd9C;AACD;;AACD;;AACF,aAAA,EAAA;AACE,cAAA,OAAA,EAAa;AACXA,YAAAA,WAAW,GAAG,KAAA,WAAA,CAAiB;AAAC+C,cAAAA,KAAK,EAAEJ,aAAa,CAAbA,KAAAA,GAAsB;AAA9B,aAAjB,CAAd3C;AADF,WAAA,MAEO;AACLA,YAAAA,WAAW,GAAG,KAAA,QAAA,CAAA,GAAA,CAAkB;AAACuB,cAAAA,GAAG,EAAE,CAAA,CAAA,EAAN,GAAM,CAAN;AAAgBuB,cAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA;AAA1B,aAAlB,CAAd9C;AACD;;AACD;;AACF,aAAA,EAAA;AACE,cAAA,OAAA,EAAa;AACXA,YAAAA,WAAW,GAAG,KAAA,WAAA,CAAiB;AAAC+C,cAAAA,KAAK,EAAEJ,aAAa,CAAbA,KAAAA,GAAsB;AAA9B,aAAjB,CAAd3C;AADF,WAAA,MAEO;AACLA,YAAAA,WAAW,GAAG,KAAA,QAAA,CAAA,GAAA,CAAkB;AAACuB,cAAAA,GAAG,EAAE,CAAA,CAAA,EAAI,CAAV,GAAM,CAAN;AAAiBuB,cAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA;AAA3B,aAAlB,CAAd9C;AACD;;AACD;;AACF;AACE,iBAAA,KAAA;AAhDJ;;AAkDA,aAAO,KAAA,cAAA,CAAA,WAAA,EAAP,uBAAO,CAAP;AACD;;;;;;SA1ZkBT,a","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\nimport debounce from './debounce';\n\nimport type {MjolnirEvent} from 'mjolnir.js';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport const LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: (t: number) => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend', 'pinchcancel'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n  events: Array<string> = [];\n  mapState: MapState;\n  onViewportChange: Function;\n  onStateChange: Function;\n  mapStateProps: any;\n  eventManager: any;\n  scrollZoom: boolean = true;\n  dragPan: boolean = true;\n  dragRotate: boolean = true;\n  doubleClickZoom: boolean = true;\n  touchZoom: boolean = true;\n  touchRotate: boolean = false;\n  keyboard: boolean = true;\n\n  _state: any = {\n    isDragging: false\n  };\n  _events: any = {};\n  _transitionManager: TransitionManager = new TransitionManager();\n\n  constructor() {\n    (this: any).handleEvent = this.handleEvent.bind(this);\n    (this: any)._onWheelEnd = debounce(this._onWheelEnd, 100);\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event: MjolnirEvent) {\n    this.mapState = this.getMapState();\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchcancel':\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event: MjolnirEvent): Array<number> {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  setState = (newState: any) => {\n    Object.assign(this._state, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  };\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState: MapState, extraProps: any = {}, extraState: any = {}) {\n    // Always trigger callback on initial update (resize)\n    const oldViewport = this.mapState ? this.mapState.getViewportProps() : {};\n    const newViewport = Object.assign({}, newMapState.getViewportProps(), extraProps);\n\n    const viewStateChanged = Object.keys(newViewport).some(\n      key => oldViewport[key] !== newViewport[key]\n    );\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, extraState, oldViewport);\n    }\n\n    this.setState(Object.assign({}, newMapState.getInteractiveState(), extraState));\n  }\n\n  getMapState(overrides?: any): MapState {\n    return new MapState(Object.assign({}, this.mapStateProps, this._state, overrides));\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options: any) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    const dimensionChanged = !this.mapStateProps || this.mapStateProps.height !== options.height;\n\n    this.mapStateProps = options;\n\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(new MapState(options));\n    }\n    // Update transition\n    this._transitionManager.processViewportChange(\n      Object.assign({}, options, {\n        onStateChange: this.setState\n      })\n    );\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames: Array<string>, enabled: boolean) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event: MjolnirEvent) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.panStart({pos}).rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event: MjolnirEvent) {\n    return this.isFunctionKeyPressed(event) || event.rightButton\n      ? this._onPanRotate(event)\n      : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event: MjolnirEvent) {\n    const newMapState = this.mapState.panEnd().rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event: MjolnirEvent) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event: MjolnirEvent) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.mapState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newMapState = this.mapState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event: MjolnirEvent) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isZooming: true});\n    // Wheel events are discrete, let's wait a little before resetting isZooming\n    this._onWheelEnd();\n    return true;\n  }\n\n  _onWheelEnd() {\n    this.setState({isZooming: false});\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event: MjolnirEvent) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event: MjolnirEvent) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newMapState = newMapState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event: MjolnirEvent) {\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event: MjolnirEvent) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(\n      newMapState,\n      Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({around: pos})\n      }),\n      {isZooming: true}\n    );\n    return true;\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event: MjolnirEvent) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - 2});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - 1});\n        }\n        break;\n      case 187: // +\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + 2});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + 1});\n        }\n        break;\n      case 37: // left\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing - 15\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [100, 0], startPos: [0, 0]});\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing + 15\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [-100, 0], startPos: [0, 0]});\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch + 10});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, 100], startPos: [0, 0]});\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch - 10});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, -100], startPos: [0, 0]});\n        }\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n  /* eslint-enable complexity */\n}\n"]},"metadata":{},"sourceType":"module"}