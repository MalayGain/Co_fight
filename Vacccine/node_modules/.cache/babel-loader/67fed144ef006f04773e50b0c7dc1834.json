{"ast":null,"code":"var DEPRECATED_PROPS = [{\n  old: 'onChangeViewport',\n  \"new\": 'onViewportChange'\n}, {\n  old: 'perspectiveEnabled',\n  \"new\": 'dragRotate'\n}, {\n  old: 'onHoverFeatures',\n  \"new\": 'onHover'\n}, {\n  old: 'onClickFeatures',\n  \"new\": 'onClick'\n}, {\n  old: 'touchZoomRotate',\n  \"new\": 'touchZoom, touchRotate'\n}, {\n  old: 'mapControls',\n  \"new\": 'controller'\n}];\n\nfunction getDeprecatedText(name) {\n  return \"react-map-gl: `\".concat(name, \"` is removed.\");\n}\n\nfunction getNewText(name) {\n  return \"Use `\".concat(name, \"` instead.\");\n}\n\nexport default function checkDeprecatedProps() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  DEPRECATED_PROPS.forEach(function (depProp) {\n    if (props.hasOwnProperty(depProp.old)) {\n      var warnMessage = getDeprecatedText(depProp.old);\n\n      if (depProp[\"new\"]) {\n        warnMessage = \"\".concat(warnMessage, \" \").concat(getNewText(depProp[\"new\"]));\n      }\n\n      console.warn(warnMessage);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/utils/deprecate-warn.js"],"names":["DEPRECATED_PROPS","old","props","depProp","warnMessage","getDeprecatedText","getNewText","console"],"mappings":"AAGA,IAAMA,gBAAgB,GAAG,CACvB;AAACC,EAAAA,GAAG,EAAJ,kBAAA;AAA0B,SAAK;AAA/B,CADuB,EAEvB;AAACA,EAAAA,GAAG,EAAJ,oBAAA;AAA4B,SAAK;AAAjC,CAFuB,EAGvB;AAACA,EAAAA,GAAG,EAAJ,iBAAA;AAAyB,SAAK;AAA9B,CAHuB,EAIvB;AAACA,EAAAA,GAAG,EAAJ,iBAAA;AAAyB,SAAK;AAA9B,CAJuB,EAKvB;AAACA,EAAAA,GAAG,EAAJ,iBAAA;AAAyB,SAAK;AAA9B,CALuB,EAMvB;AAACA,EAAAA,GAAG,EAAJ,aAAA;AAAqB,SAAK;AAA1B,CANuB,CAAzB;;AASA,SAAA,iBAAA,CAAA,IAAA,EAAiD;AAC/C,SAAA,kBAAA,MAAA,CAAA,IAAA,EAAA,eAAA,CAAA;AACD;;AAED,SAAA,UAAA,CAAA,IAAA,EAA0C;AACxC,SAAA,QAAA,MAAA,CAAA,IAAA,EAAA,YAAA,CAAA;AACD;;AAOD,eAAe,SAAA,oBAAA,GAA+C;AAAA,MAAjBC,KAAiB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAE5DF,EAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,UAAA,OAAA,EAAW;AAClC,QAAIE,KAAK,CAALA,cAAAA,CAAqBC,OAAO,CAAhC,GAAID,CAAJ,EAAuC;AACrC,UAAIE,WAAW,GAAGC,iBAAiB,CAACF,OAAO,CAA3C,GAAmC,CAAnC;;AACA,UAAIA,OAAO,CAAX,KAAW,CAAX,EAAiB;AACfC,QAAAA,WAAW,GAAA,GAAA,MAAA,CAAA,WAAA,EAAA,GAAA,EAAA,MAAA,CAAqBE,UAAU,CAACH,OAAO,CAAlDC,KAAkD,CAAR,CAA/B,CAAXA;AACD;;AACDG,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,WAAAA;AACD;AAPHP,GAAAA;AASD","sourcesContent":["// @flow\n\n// 'new' is optional\nconst DEPRECATED_PROPS = [\n  {old: 'onChangeViewport', new: 'onViewportChange'},\n  {old: 'perspectiveEnabled', new: 'dragRotate'},\n  {old: 'onHoverFeatures', new: 'onHover'},\n  {old: 'onClickFeatures', new: 'onClick'},\n  {old: 'touchZoomRotate', new: 'touchZoom, touchRotate'},\n  {old: 'mapControls', new: 'controller'}\n];\n\nfunction getDeprecatedText(name: string): string {\n  return `react-map-gl: \\`${name}\\` is removed.`;\n}\n\nfunction getNewText(name: string): string {\n  return `Use \\`${name}\\` instead.`;\n}\n\n/**\n * Checks props object for any prop that is deprecated and insert a console\n * warning to the user. This will also print out the recommended new prop/API\n * if one exists.\n */\nexport default function checkDeprecatedProps(props: any = {}) {\n  /* eslint-disable no-console, no-undef */\n  DEPRECATED_PROPS.forEach(depProp => {\n    if (props.hasOwnProperty(depProp.old)) {\n      let warnMessage = getDeprecatedText(depProp.old);\n      if (depProp.new) {\n        warnMessage = `${warnMessage} ${getNewText(depProp.new)}`;\n      }\n      console.warn(warnMessage);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}